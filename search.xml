<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>比较与排序</title>
      <link href="/posts/901e.html"/>
      <url>/posts/901e.html</url>
      
        <content type="html"><![CDATA[<h1 id="比较与排序">1比较与排序</h1><h2 id="接口Comparator和Comparable">1.1接口Comparator和Comparable</h2><ol><li><p>Comparator接口：==package java.util;==</p><p>Comparable接口：==java.lang==</p></li><li><blockquote><p>Comparator：这是一个函数接口，因此可以用作 lambda 表达式或方法引用的赋值目标，作为比较器，需要一个类实现接口，实现类本身不许要任何操作；接口拥有静态方法，实例方法，默认方法，抽象方法，功能比Comparable更强大。</p></blockquote><blockquote><p>Comparator更多的是临时起意，临时改变一下排序规则.</p></blockquote><ul><li><p>常用抽象方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>T o1<span class="token punctuation">,</span> T o2<span class="token punctuation">)</span></code></pre><p>​    会抛出  空指针异常和ClassCastException    </p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span></code></pre></li></ul><p>实现 <code>Comparator</code> 接口的类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> In_Face<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 该类只使用一次，在EmployeeSortTest类中可使用匿名内部类或lambad * @author DevilStory * @version 0.0.1 * @Date 2021/7/14 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">compareWage</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 自定义的比较方法     * */</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Employee p1<span class="token punctuation">,</span>Employee p2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> p2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span> p2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实现排序的类：<code>Employee</code></p><pre class=" language-java"><code class="language-java">var staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>staff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Harry Hacker"</span><span class="token punctuation">,</span> <span class="token number">35000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>staff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Carl Cracker"</span><span class="token punctuation">,</span> <span class="token number">75000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>staff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Tony Tester"</span><span class="token punctuation">,</span> <span class="token number">38000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>##加入比较器进行比较；也可使用匿名内部类和lambda方法Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>staff<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">compareWage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                                                        <span class="token comment" spellcheck="true">// print out information about all Employee objects</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Employee e <span class="token operator">:</span> staff<span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token operator">+</span> <span class="token string">",salary="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">gtSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><blockquote><p>Comparable接口：常用与类内部，进行<em>比较与排序</em>，其中排序为自然排序，用<code>sort()</code>实现,比较用<code>comparaTo()</code>实现。</p></blockquote><p>建议将<code>ComparaTo()</code>与<code>equals()</code>结果保持一致，用于保证集合中元素的唯一性和有序性</p><p>用法：</p><ul><li>将要实现比较和排序的对象所在类实现<code>Comparable</code>接口</li><li>实现接口的ComparaTo()方法</li><li>调用Arrays.sort()方法或Collections.sort（）方法。</li></ul><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> In_Face<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Employee<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">return</span> salary<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">raiseSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> byPercent<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">double</span> raise <span class="token operator">=</span> salary <span class="token operator">*</span> byPercent <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>     salary <span class="token operator">+=</span> raise<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Compares employees by salary   * @param other another Employee object   * @return a negative value if this employee has a lower salary than   * otherObject, 0 if the salaries are the same, a positive value otherwise   */</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Employee other<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">return</span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>salary<span class="token punctuation">,</span> other<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr></blockquote><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeSortTest</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     var staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     staff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Harry Hacker"</span><span class="token punctuation">,</span> <span class="token number">35000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     staff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Carl Cracker"</span><span class="token punctuation">,</span> <span class="token number">75000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     staff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Tony Tester"</span><span class="token punctuation">,</span> <span class="token number">38000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>#此处区别于Comparator接口的排序方法     Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>staff<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// print out information about all Employee objects</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee e <span class="token operator">:</span> staff<span class="token punctuation">)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",salary="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote></li><li><p>CompareTo（）方法</p><ul><li><p>应遵循反对称的规则，即</p><pre class=" language-java"><code class="language-java"> y<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>抛出异常，则x<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>也抛出异常 <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>T o<span class="token punctuation">)</span></code></pre></li><li><p><strong>Parameters:</strong></p><p><code>o</code> - the object to be compared.</p><p><strong>Returns:</strong></p><p>a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.</p><p>**Throws:**会抛出</p><p>空指针异常</p><p><code>NullPointerException</code> - if the specified object is null</p><p>类转化异常</p><p><code>ClassCastException</code> - if the specified object’s type prevents it from being compared to this object.</p><ul><li><p>在具有继承关系的类中，在进行父子类的比较时，要注意实现了Comparable接口的类，才能调用CompareTo（）方法，虽然可以进行类型转换，但类对象的权限发生了改变，破坏了封装性，不提倡使用</p></li><li><p>改善方法 ：</p><p>若不同的子类的比较方法不同，不同子类对象的比较将视为非法</p><p>在进行比较前对比较对象<strong>类判决</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>y<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassCastException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>若存在一个能比较子类的通用方法，则可在超类中提供compareTo（）方法，并设为<code>final</code></p></li><li><p> 和equals（）类似</p></li></ul></li></ul></li></ol><h2 id="总结">1.2总结</h2><ol><li><blockquote><p>比较：Comparator接口方法更多；常用做当类编写完后，需要比较类对象，但该类中不方便加入Comparator接口实现类中的比较，<code>常常另写新类实现Comparator接口</code>进行比较</p></blockquote></li><li><p>排序：Comparator的排序方法中要加入<em>比较器</em>  </p><p><strong>Arrays.sort(staff,new compareWage()</strong>,</p><p>而Comparable比较加入比较对象<strong>Arrays.sort(staff)</strong></p></li><li><p>参考文档：</p><p><a href="https://www.cnblogs.com/Yee-Q/p/13729929.html" rel="external nofollow noreferrer">Java Comparable 和 Comparator 接口详解 - 低吟不作语 - 博客园 (cnblogs.com)</a></p><p>java核心技术卷I 第6章</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> comparable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compareTo </tag>
            
            <tag> comparable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件的常见操作</title>
      <link href="/posts/5e9f.html"/>
      <url>/posts/5e9f.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件操作和I-O流">1文件操作和I/O流</h1><h2 id="I-O流概念及分类">1.1I/O流概念及分类</h2><h3 id="概念">1.1.1概念</h3><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/IO%E6%B5%81/%E6%96%87%E4%BB%B6%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/image-20210801192344290-1627817027695.png" alt="image-20210801192344290"></p><h3 id="按处理源数据的类型">1.1.2按处理源数据的类型</h3><p>1.操作数据单位：<strong>字节流、字符流</strong></p><p>2.数据的流向：<strong>输入流、输出流</strong></p><p>3流的角色：<strong>节点流、处理流</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/IO%E6%B5%81/%E6%96%87%E4%BB%B6%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/%E6%B5%81%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="流体系结构"></p><h2 id="File类">1.2File类</h2><ol><li><p>构造函数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">File</span><span class="token punctuation">(</span>URI uri<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">File</span><span class="token punctuation">(</span>File parent<span class="token punctuation">,</span> String child<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">File</span><span class="token punctuation">(</span>String parent<span class="token punctuation">,</span> String child<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token function">File</span><span class="token punctuation">(</span>String pathname<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token function">File</span><span class="token punctuation">(</span>String child<span class="token punctuation">,</span> File parent<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token function">File</span><span class="token punctuation">(</span>String pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> prefixLength<span class="token punctuation">)</span></code></pre></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Files<span class="token punctuation">.</span>createFile<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>testng<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/1 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">createTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//public File(String pathname)</span>    String path<span class="token operator">=</span><span class="token string">"D:\\test1.txt"</span><span class="token punctuation">;</span>    File file <span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//public File(String parent, String child)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\"</span><span class="token punctuation">,</span> <span class="token string">"test2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//public File(File parent, String child)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File parentfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parentfile<span class="token punctuation">,</span> <span class="token string">"test3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/IO%E6%B5%81/%E6%96%87%E4%BB%B6%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/image-20210801184850656.png" alt="image-20210801184850656" style="zoom: 80%;"><p>2.常用方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Files<span class="token punctuation">.</span>createFile<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>testng<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/1 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">opFile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\新建文件夹10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//仅仅是两级目录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mkdir one directory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\dir\\dirs\\java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多级目录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mkdir one directory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\test1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">isdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\test1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\dir\\dirs\\java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> I/O流 </category>
          
          <category> File类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> File </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Propertise</title>
      <link href="/posts/4557.html"/>
      <url>/posts/4557.html</url>
      
        <content type="html"><![CDATA[<h1 id="Propertise">1Propertise</h1><h2 id="运用">1.1运用</h2><p>Propertise类主要用于java程序在运行时修改程序不方便而产生，可用云配置的读取和输出</p><h2 id="类简述">1.2类简述</h2><ol><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span><span class="token keyword">class</span> <span class="token class-name">Properties</span> <span class="token keyword">extends</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> </code></pre><p>使得propertise具有一些Hashtable的特点。</p></li><li><p>构造方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//The initial capacity of a Properties is 8</span><span class="token keyword">public</span> <span class="token function">Properties</span><span class="token punctuation">(</span>Properties defaults<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//8</span><span class="token keyword">public</span> <span class="token function">Properties</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定</span></code></pre><p>没有加载因子的概念</p><p>添加元素，底层采用CurrentHashMap</p></li></ol><p>3.常用方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//遍历 debug</span>    <span class="token keyword">public</span> Enumeration<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用于遍历value    </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">store</span><span class="token punctuation">(</span>Writer writer<span class="token punctuation">,</span> String comments<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//储存配置文件，若输出路径已有该文件，则覆盖</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">store</span><span class="token punctuation">(</span>OutputStream out<span class="token punctuation">,</span> String comments<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//多少对K-V</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Object <span class="token function">putIfAbsent</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不存在key，则添加；存在，存在则无法添加</span>    <span class="token keyword">public</span> Enumeration<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">propertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//获取Key</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span>Reader reader<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//读取配置文件</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span>InputStream inStream<span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span>PrintWriter out<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//输出</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span>PrintStream out<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getProperty</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//由key得到value</span>    <span class="token keyword">public</span> String <span class="token function">getProperty</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>BiConsumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Object<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> Object<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//lamdad</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//是否存在该value</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span></code></pre><h2 id="遍历输出和debug">1.3遍历输出和debug</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Files<span class="token punctuation">.</span>propertise<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>testng<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/4 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">propertiseTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Properties pr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pr1<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src\\mes.propertise"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pr1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Enumeration<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> enums <span class="token operator">=</span> pr1<span class="token punctuation">.</span><span class="token function">propertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//普通迭代器</span>        Iterator<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> iterator <span class="token operator">=</span> enums<span class="token punctuation">.</span><span class="token function">asIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Propertise的迭代</span><span class="token comment" spellcheck="true">//                public Enumeration&lt;Object> elements() {</span><span class="token comment" spellcheck="true">//                    // CHM.elements() returns Iterator w/ remove() - instead wrap values()</span><span class="token comment" spellcheck="true">//                    return Collections.enumeration(map.values());</span><span class="token comment" spellcheck="true">//                }</span>                Enumeration<span class="token operator">&lt;</span>Object<span class="token operator">></span> elements <span class="token operator">=</span> pr1<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//来自Hashtable的迭代方法</span>      Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">>></span> entries <span class="token operator">=</span> pr1<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//lamdad</span>        pr1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//零散方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pr1<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pr1<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"jf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// pr1.setProperty("name",666);</span>        pr1<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"Banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Store（）方法</span>        BufferedWriter bufferedWriter<span class="token operator">=</span>null<span class="token punctuation">;</span>        File filePath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src\\mes.propertise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pr1<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>bufferedWriter<span class="token punctuation">,</span><span class="token string">"储存于E盘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//储存后再读取</span>        BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span>                <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\jarc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String date<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>date<span class="token operator">=</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    配置文件输出</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Properties pr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pr1<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src\\mes.propertise"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\pr1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintStream print <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pr1<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="存在的一些问题">1.4存在的一些问题</h2><ol><li><p>由于Propertise继承字Hashtable；故也拥有<strong>put() 和putAll()等方法</strong>，而这两种方法，允许加入非String的数据，且加入时并不会报检查异常，并在迭代时添加元素没有fast—fail机制保护，导致在其他需要操作配置文件时出现异常比如采用store（）存储配置出现类型转换异常，非常头疼！<br><strong>不希望使用以上的方法添加配置文件信息。。</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/IO%E6%B5%81/Propertise/image-20210804130008537-1628053210738.png" alt="image-20210804130008537"></p></li></ol><p> <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/IO%E6%B5%81/Propertise/image-20210804130156690-1628053319084.png" alt="image-20210804130156690"></p><p>2.Closeable扩展了AutoCloseable接口，目的是为了抛出更多的异常</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Closeable</span> <span class="token keyword">extends</span> <span class="token class-name">AutoCloseabl</span>    前者只能<span class="token keyword">throws</span> IOExceptio，而后者<span class="token keyword">throws</span> Exceptio，即所有的异常</code></pre>]]></content>
      
      
      <categories>
          
          <category> java文件配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Propertise滥用结果 </tag>
            
            <tag> Propertise简单使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda</title>
      <link href="/posts/9ee5.html"/>
      <url>/posts/9ee5.html</url>
      
        <content type="html"><![CDATA[<h1 id="lambda">1lambda</h1><h2 id="引入lambda的原因">1.1引入lambda的原因</h2><ol><li>传递“代码块”，方便以后执行一次或者多次</li><li>简化匿名内部类的简化调用</li><li>需要使用函数式接口的对象<br>函数式接口：严格来说，<strong>仅仅</strong>具有一个抽象方法的接口；对于函数式接口，可用@FunctionalInterface注解接口，也可不用该注解，使用优点有二：<ul><li>函数式接口在添加另外的抽象方法时，将会报编译异常，直观！</li><li>javadoc中将会指明该接口类型</li></ul></li></ol><h2 id="lambda的语法及结构">1.2lambda的语法及结构</h2><pre class=" language-java"><code class="language-java">语法 ：<span class="token punctuation">(</span>类型 参数<span class="token number">1</span>，类型 参数<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>代码块<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*结构：1.参数2.连接符3.自由变量*/</span></code></pre><ol><li><p><strong>语法使用</strong>：</p><ul><li><p>没有参数，（）必不可少</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>只有一条需要执行的语句，可省去{}</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>类型 参数<span class="token number">1</span>，类型 参数<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>语句体</code></pre></li><li><p>若可以根据上下文推导出参数 的类型，则只写参数即可</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span> 参数<span class="token number">1</span>，参数<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>代码块<span class="token punctuation">}</span></code></pre></li><li><p>不可在lambda的语句体中的不同情况下返回部分情况的结果（return）</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> return1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//非法</span></code></pre></li><li><p>lambda表达式不可赋值给非函数式接口类型，如Object类等</p><pre class=" language-java"><code class="language-java">Object obj<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>x<span class="token operator">-</span>y<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//非法</span></code></pre></li><li><p>lambda非对象，只不过可为函数式接口的变量赋值时会生成一个对象</p></li></ul></li></ol><p>2.<strong>结构和lambda变量的作用域</strong>：</p><p>​    <strong>lambda表达式为java语言中的闭包</strong></p><ul><li>和嵌套块一致，变量的作用域只局限与lambda内</li><li>lambda捕获的变量，<strong>即不管该变量是方法参数还是局部变量，必须为引用不可变化的的变量</strong>，是为了多线程的安全考虑</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">freeVar</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>    time<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//exception</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/Lambda/image-20210805151240268-1628147561960.png" alt="错误演示"></p><h2 id="lambda的使用">1.3lambda的使用</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    String <span class="token function">sendMessage</span><span class="token punctuation">(</span>String mes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">lam</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//lambda使用</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实现方法调用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Electrician</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"方法重写"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//匿名匿名内部类</span>        Employee employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">sendMessage</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> s<span class="token operator">+</span><span class="token string">"END"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"方法重写"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//lambda</span>        Employee employee1 <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token operator">+</span><span class="token string">"END"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee1<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"方法重写"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//lambda捕获的变量的引用不可变</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">freeVar</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//time++;</span>    <span class="token comment" spellcheck="true">//()-> System.out.println(time);</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/Lambda/image-20210805194950955-1628164193383.png" alt="image-20210805194950955"></p><h2 id="方法引用">1.4方法引用</h2><h3 id="引入原因">1.4.1引入原因</h3><ol><li>方法引用是为了简化lambda的写法</li><li>对象方法引用比其对应的lambda表达式有更好的异常检查机制</li><li>方法引用的条件<br>已用的lambda方法体中的内容<strong>已有方法实现</strong>，且<strong>lambda表达式的方法参数和返回值类型和已有方法的参数，返回值类型一致</strong></li></ol><h3 id="方法引用的几种情况">1.4.2方法引用的几种情况</h3><ol><li><p>static方法引用 <code>类名::静态方法</code></p><pre class=" language-java"><code class="language-java">Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>eleList<span class="token punctuation">,</span>Electrician<span class="token operator">:</span><span class="token operator">:</span>compareName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>对象的实例方法引用 <code>对象:: 方法名</code></p><pre class=" language-java"><code class="language-java">Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>eleList<span class="token punctuation">,</span>ele<span class="token operator">:</span><span class="token operator">:</span>compareAge<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>类名的实例方法引用 <code>类名::方法名</code></p></li></ol><pre class=" language-java"><code class="language-java">Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>stringArray<span class="token punctuation">,</span> String<span class="token operator">:</span><span class="token operator">:</span>compareToIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.构造函数的方法引用<br>对基本数据类型<code>类型::new</code><br>对引用数据类型：<code>类型::new</code>,此方法可以填补不能构造泛型数组的缺点</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        IntFunction<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> intFunction <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints1 <span class="token operator">=</span> intFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造函数引用</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun<span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>        fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//引用数据类型构造函数引用</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>ArrayList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun1<span class="token operator">=</span> <span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ArrayList<span class="token punctuation">[</span><span class="token punctuation">]</span> arrylist <span class="token operator">=</span> fun1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>ArrayList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun2<span class="token operator">=</span>ArrayList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>        ArrayList<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayList1 <span class="token operator">=</span> fun2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="实例">1.4.3实例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> lambda_and_methodrefrence<span class="token punctuation">.</span>lambda_<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>testng<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDate<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>IntFunction<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/5 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Electrician</span> <span class="token keyword">implements</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalDate age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态的name比较</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compareName</span><span class="token punctuation">(</span>Electrician er1<span class="token punctuation">,</span> Electrician er2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> er1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>er2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对象的实例方法age比较</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareAge</span><span class="token punctuation">(</span>Electrician er1<span class="token punctuation">,</span> Electrician er2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> er1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>er2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">sendMessage</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Electrician<span class="token punctuation">[</span><span class="token punctuation">]</span> eleList <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Electrician</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Electrician</span><span class="token punctuation">(</span><span class="token string">"mark"</span><span class="token punctuation">,</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Electrician</span><span class="token punctuation">(</span><span class="token string">"lolin"</span><span class="token punctuation">,</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//static lambda</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>eleList<span class="token punctuation">,</span><span class="token punctuation">(</span>Electrician e1<span class="token punctuation">,</span>Electrician e2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token function">compareName</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//[jack, lolin, mark]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>eleList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//静态方法引用</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>eleList<span class="token punctuation">,</span>Electrician<span class="token operator">:</span><span class="token operator">:</span>compareName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//[jack, lolin, mark]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>eleList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对象的实例方法引用</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>eleList<span class="token punctuation">,</span><span class="token punctuation">(</span>Electrician e1<span class="token punctuation">,</span>Electrician e2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Electrician lamele <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Electrician</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> lamele<span class="token punctuation">.</span><span class="token function">compareAge</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//[jack, mark, lolin]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>eleList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对象的实例方法引用</span>        Electrician ele<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Electrician</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>eleList<span class="token punctuation">,</span>ele<span class="token operator">:</span><span class="token operator">:</span>compareAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//[jack, mark, lolin]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>eleList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//类名的实例方法lambda</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> stringArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Barbara"</span><span class="token punctuation">,</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>stringArray<span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//[Barbara, James, John, Mary]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>stringArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//类名的实例方法引用</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>stringArray<span class="token punctuation">,</span> String<span class="token operator">:</span><span class="token operator">:</span>compareToIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//[Barbara, James, John, Mary]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>stringArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基本数据类型构造函数lambda</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        IntFunction<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> intFunction <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints1 <span class="token operator">=</span> intFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造函数引用</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun<span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>        fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//引用数据类型构造函数引用</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>ArrayList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun1<span class="token operator">=</span> <span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ArrayList<span class="token punctuation">[</span><span class="token punctuation">]</span> arrylist <span class="token operator">=</span> fun1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>ArrayList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun2<span class="token operator">=</span>ArrayList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>        ArrayList<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayList1 <span class="token operator">=</span> fun2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//泛型数组，有待、、、</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Electrician</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Electrician</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> LocalDate age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> LocalDate <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p> <a href="https://juejin.cn/post/6881259928909152270#heading-0" rel="external nofollow noreferrer">方法引用短文</a></p>]]></content>
      
      
      <categories>
          
          <category> java的lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常</title>
      <link href="/posts/130c.html"/>
      <url>/posts/130c.html</url>
      
        <content type="html"><![CDATA[<h1 id="异常">1异常</h1><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/java%E5%BC%82%E5%B8%B8/image-20210724175927675-1627120771758.png" alt="image-20210724175927675"></p><h2 id="异常类常用到throwable类的方法">1.1异常类常用到throwable类的方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Throwable <span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Throwable <span class="token function">initCause</span><span class="token punctuation">(</span>Throwable cause<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addSuppressed</span><span class="token punctuation">(</span>Throwable exception<span class="token punctuation">)</span></code></pre><h2 id="异常处理中的特点">1.2异常处理中的特点</h2><ol><li><p><strong>Throws抛出异常的规则：捕获或者声明并抛出</strong></p><ul><li><p><strong>捕获处理</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li><li><p><strong>声明并抛出</strong></p><pre class=" language-java"><code class="language-java"><span class="token function">xxxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> xxxException<span class="token punctuation">{</span>    xxxx <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">xxxException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>捕获，声明并抛出</strong></p><pre class=" language-java"><code class="language-java"><span class="token function">xxxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> xxxException<span class="token punctuation">{</span>    xxxx <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">xxxException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul></li><li><p>异常不用做流程处理，因为其效率较低</p></li><li><p>可以使用 try-with-resources 方式，处理资源</p></li><li><p>捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。</p></li><li><p><strong>子类中覆盖了父类的一个方法，子类的方法声明的检查性异常不能比父类中的方法更通用，即只能为父类声明异常的同类型或者子类，且不能不抛出异常；若父类方法没抛出任何异常，则子类的方法也不能抛出任何异常</strong></p></li><li><p><strong>throwable类中的initCause</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntialCause</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span>ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ClassNotFoundException serve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//应该用父类的异常来包装子类异常</span>                <span class="token comment" spellcheck="true">//ClassNotFoundException不是IOException的子类</span>                serve<span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>throwables<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> serve<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ol><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/java%E5%BC%82%E5%B8%B8/image-20210725110630657-1627182392172.png" alt="image-20210725110630657"></p><ul><li><strong>我们长想要捕获底层的异常但也要抛出高层的异常</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntialCause</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//              IOException serve = new IOException("bbb");</span> <span class="token comment" spellcheck="true">//              serve.initCause(file);</span>                IOException serve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> serve<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/java%E5%BC%82%E5%B8%B8/image-20210725125935490-1627189176648.png" alt="image-20210725125935490"></p><p>7.<strong>finally语句块</strong></p><ul><li><p><strong>finally 语句块在异常处理语句都会执行，一般起到资源释放的作用，而对finally中的可检查异常，可使用嵌套的try-catch语句，例如</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>若try-catch语句中有return，finally将在return前执行，并且如果fianlly中有return，将会覆盖之前return的结果，造成意料之外的错误,因此finally中不应有return，break，continue，throw等</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Finally_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//out:4</span>            <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/java%E5%BC%82%E5%B8%B8/image-20210725131823704-1627190306844.png" alt="image-20210725131823704"></p><h2 id="异常链">1.3异常链</h2><p>未完待续。。。</p><h2 id="断言">1.4断言</h2><p>未完待续、、、</p><h2 id="例子">1.5例子</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Clothes</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> String BrandName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> BrandAddress<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> revenue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用LInkedHashMap来存Clothes对象，</span>    <span class="token keyword">private</span> LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> clothes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0.75f</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 利用BrandName，BrandAddress判断clothes集合是否有对象，并根据revenue计算该品牌的下一年利润 * 利用异常处理，处理传入next_revenue方法中rate参数的合理性 * 抛出自定义的异常RateRangeException和RateFormatException * * */</span>    <span class="token keyword">public</span>  <span class="token keyword">float</span> <span class="token function">next_revenue</span><span class="token punctuation">(</span>String Abrand<span class="token punctuation">,</span><span class="token keyword">int</span> brandAddress<span class="token punctuation">,</span>Float rate<span class="token punctuation">)</span><span class="token keyword">throws</span> RateRangeException<span class="token punctuation">,</span>RateFormatException<span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rate<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RateFormatException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span> rate<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RateRangeException</span><span class="token punctuation">(</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//利用"|"并列自定义的两个毫无相关的异常类</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span>RateRangeException <span class="token operator">|</span> RateFormatException e  <span class="token punctuation">)</span><span class="token punctuation">{</span>            String message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//捕获Exception异常，避免没有考虑到的其他异常</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"neither range or format error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        利用keySet（）方法获取clothes集合中key的set集合，做后续的处理</span>        Set clothes_Key <span class="token operator">=</span> clothes<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> clothes_Key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer integer <span class="token operator">=</span> clothes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Abrand<span class="token operator">!=</span>o<span class="token operator">||</span>integer<span class="token operator">!=</span>brandAddress<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span>                revenue<span class="token operator">+=</span>brandAddress<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>revenue<span class="token operator">*=</span> rate<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Clothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 属性clothes的set方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClothes</span><span class="token punctuation">(</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> clothes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clothes <span class="token operator">=</span> clothes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义的异常类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateFormatException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">RateFormatException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"rate is invalid format"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"rate's format is invalid "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义的异常类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateRangeException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> rate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RateRangeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">RateRangeException</span><span class="token punctuation">(</span><span class="token keyword">float</span> rate<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rate<span class="token operator">=</span>rate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rate<span class="token operator">+</span><span class="token string">":  "</span><span class="token operator">+</span><span class="token string">"rate over normal range is illegible "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"RateRangeException{"</span> <span class="token operator">+</span>                <span class="token string">"rate="</span> <span class="token operator">+</span> rate <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java异常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map</title>
      <link href="/posts/63b8.html"/>
      <url>/posts/63b8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Map">1Map</h1><h2 id="基本依赖">1.1基本依赖</h2><h3 id="依赖图">1.1.1依赖图</h3><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/Map-1626683917074-1626683918240.png" alt="Map"></p><h3 id="Map元素特点">1.1.2Map元素特点</h3><ol><li><p>Map与Collection并列存在，用于保存具有键值对的数据，&lt;key,value&gt;,</p></li><li><p>由于Key的hash值存放数据位置于HashMap$Node中，故加入的键为无序的</p></li><li><p>不可有重复的元素出现，key和values都可为null，键不可重复，若重复则新数据覆盖旧数据，value可重复；区别于HashSet，HashSet中添加“相同”的元素，底层将会直接跳出添加方法，无法加入，也即无重复的元素</p></li><li><p>通常取字符串为key</p></li><li><p>可由key寻找value</p></li></ol><h2 id="hashMap">1.2hashMap</h2><h3 id="类属性和方法">1.2.1类属性和方法</h3><p><strong>属性</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> Serializable</code></pre><p><strong>内部类</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210719165355630-1626684860266.png" alt="hashmap类属性"></p><p>实现接口Map.Entry&lt;K,V&gt; ，便于将HashMap集合中的key—value放于Node结点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>存放HashMap中的key</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">KeySet</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSet</span><span class="token operator">&lt;</span>K<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>HashMap类中的方法keySet()可获取Set类型的key集合</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>K<span class="token operator">></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>K<span class="token operator">></span> ks <span class="token operator">=</span> keySet<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ks <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            keySet <span class="token operator">=</span> ks<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ks<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>HashMap类中的方法values()可获取Collection类型的value集合</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Collection<span class="token operator">&lt;</span>V<span class="token operator">></span> vs <span class="token operator">=</span> values<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vs <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values <span class="token operator">=</span> vs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vs<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Values</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCollection</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><blockquote><p>HashMap类中的方法entrySet()可获取Map.Entry&lt;K,V&gt;类型的key-value集合,通过实现Map接口中的V getValue(),<br>K getKey()抽象方法，获取key和value</p></blockquote><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210719172823230-1626686906881.png" alt="image-20210719172823230"></p><p><strong>HashMap中的entrySet属性</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">transient</span> Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> entrySet<span class="token punctuation">;</span></code></pre><p><strong>HashMap中的entrySet()方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> es<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>es <span class="token operator">=</span> entrySet<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token punctuation">(</span>entrySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EntrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> es<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">EntrySet</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSet</span><span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span> </code></pre><h4 id="属性应用总结">1.2.1.1属性应用总结</h4><ol><li><p>通过HashMap类中的方法**entrySet()**可获取key-value集合，</p><p>此集合为Map.Entry&lt;K,V&gt;类型，</p><p>而Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt;接口，并实现接口Map.Entry&lt;K,V&gt;的<strong>getKey（）和getvalue（）</strong>方法，</p></li><li><p>HashMap类中的方法keySet()可获取Set类型的key集合</p><p>HashMap类中的方法values()可获取Collection类型的value集合</p></li><li><p>故一个K-V对也可称为一个Node或者一个entry</p></li></ol><p>###用HashMap说明Map的遍历方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Map_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"First"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"林枫"</span><span class="token punctuation">,</span><span class="token string">"玉瑶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Male</span><span class="token punctuation">(</span><span class="token string">"左手"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Female</span><span class="token punctuation">(</span><span class="token string">"右手"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用Map.keySet()方法,获得Set类型的key集合，---》集合的遍历方法</span>        Set keytSet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//增强for</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> keytSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//迭代器</span>        Iterator iterator <span class="token operator">=</span> keytSet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用Map.values()方法获取value，得到Collection类型的集合，</span>        <span class="token comment" spellcheck="true">//普通for，增强for，迭代器，演示省略</span>        Collection values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用Map.entrySet()方法,继而迭代器和增强for</span>        Set entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> entrySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//HashMap$Node实现了HashMap$Entry，打印类型时将为实现类</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//class java.util.HashMap$Node多态传递现象</span>            Map<span class="token punctuation">.</span>Entry map_Entry <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> o<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map_Entry<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map_Entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>map_Entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Male</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Male</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Female</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Female</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="具体实例">1.2.2具体实例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee jack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">001</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">100000d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee jack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">001</span><span class="token punctuation">,</span> <span class="token string">"jack1"</span><span class="token punctuation">,</span> <span class="token number">100000d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee jordan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">003</span><span class="token punctuation">,</span> <span class="token string">"jordan"</span><span class="token punctuation">,</span> <span class="token number">48581d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee mirael <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">004</span><span class="token punctuation">,</span> <span class="token string">"mirael "</span><span class="token punctuation">,</span> <span class="token number">456772.8d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>jack<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>jack<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>jack1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>jack1<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>jordan<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>jordan<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>mirael<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mirael<span class="token punctuation">)</span><span class="token punctuation">;</span>        Set keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Employee employee_value <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>employee_value<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">80000d</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee_value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Collection values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Employee value_Employee <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> value<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>value_Employee<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">80000d</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value_Employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Set set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry o1 <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> o<span class="token punctuation">;</span>            Employee em_<span class="token operator">=</span><span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> o1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>em_<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">80000d</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println(o1.getValue().getClass());</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Double salary<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Double <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span>String name<span class="token punctuation">,</span>Double salary<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary<span class="token operator">=</span>salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    public  int hashCode(Object obj1){        Employee obj=(Employee)obj1;        return Objects.hash(obj.id,obj.salary,obj.name);    }    public boolean equals(Object obj){        if(obj.getClass()!=Employee.class) return false;        Employee em = (Employee) obj;        return em.getId() == this.id &amp;&amp; em.getSalary() == this.salary&amp;&amp;em.getName()==this.name;    }*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Employee employee <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> id <span class="token operator">==</span> employee<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> salary<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="put-源码解读">1.2.3put()源码解读</h3><ol><li>添加元素</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>                   <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初次添加元素进行扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//利用之前计算的hash，如果由hash和扩容后的table长度与运算得到在table中的位置为null（该位置无元素），则在table中尽量均匀的插入，(n - 1) &amp; hash减小了hash碰撞</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//若该位置有元素，判断是否加入重复的元素和该位置是否是红黑树结点</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//既无重复又不是红黑树结点，考虑遍历该链表，此时有该链表p.next == null？为null，则直接尾插于链表后，后并考虑是否需要树化；否则判断p。next是否与e相同，相同，跳出循环，并将e的value覆盖oldValue</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>                V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//只有在加于table且该位置不为NUll，modcount才会增加</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//供给实现子类重写removeEldestEntry（）实现LRU等</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2.扩容条件：</p><ul><li><p>初次添加元素</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre></li><li><p>达到扩容阈值</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>达到单条链表长度为》=8，但table长度《=64</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TREEIFY_CAPACITY<span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                     oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>                newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// initial capacity was placed in threshold</span>            newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// zero initial threshold signifies using defaults</span>            newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>            newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>            newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                      <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>        table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//确定好threshold和capacity后，将对oldTable进行链表的拆分或者红黑树转链表，目的是使元素尽量均匀的置于table中，提高HashMap的访问性能</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                        newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// preserve order</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                        <span class="token keyword">do</span> <span class="token punctuation">{</span>                            next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//此处将一条链表拆为两条链表，table下标相差16（）</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oldCap=16</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newTab<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="复杂度">1.2.4复杂度</h3><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210723132044208-1627017649584.png" alt="image-20210723132044208"></p><h3 id="Fast-Fail机制">1.2.5Fast-Fail机制</h3><p>在遍历hahhMap集合时，如果在遍历时，添加(put)或删除(remove)元素，将会失败，并抛出异常<code>java.util.ConcurrentModificationException</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap_Source</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放于table的0位置 return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ConcurrentModificationException</span>        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span><span class="token string">"v"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210723132604129-1627017966492.png" alt="image-20210723132604129"></p><h3 id="该Map在jdk1-7与jdk1-8中的差异">1.2.6该Map在jdk1.7与jdk1.8中的差异</h3><ol><li>前者在多线程时会出现死锁问题</li></ol><h2 id="LinkedHashMap">1.3LinkedHashMap</h2><ol><li><p>双向链表加数组加红黑树，提高HashMap的遍历，添加，和删除性能，</p></li><li><p>键值对同HashMap一致</p></li><li><p>可以实现LRU原理，即将最近使用最少的元素删除，提高内存的使用效率，重写LinkedHashMap中的removeEldestEntry（）方法，限制Map的元素个数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// possibly remove eldest</span>    LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>evict <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        K key <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMap_</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capatity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LinkedHashMap_</span><span class="token punctuation">(</span><span class="token keyword">int</span> pa<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0.75f</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capatity<span class="token operator">=</span>pa<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>capatity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedHashMap_  map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap_</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span><span class="token string">"V"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210723134916756-1627019358161.png" alt="image-20210723134916756"></p></li><li><p>利用带参数的LinkedHashMap方法，设置其中的accessOrder，可以控制遍历Map的顺序</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token function">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span>                         <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span>                         <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当accessOrder为false时，插入的顺序，为true时，按访问的顺序,这里的“访问”是指get和set方法</span>HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LinkedHashMap linkedHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedHashMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedHashMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span><span class="token string">"v"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出：    knllv v    k2 v1    k1 v1当accessOrder为<span class="token boolean">false</span>    k1 v1    knllv v1    k2 v1</code></pre></li><li><p>可由数据量提前设置map集合的初始值，如HashMap：initialCapatity=(元素数/0.75)+1</p></li></ol><h2 id="ConcurrentHashMap">1.4ConcurrentHashMap</h2><p>未完待续、、、</p><h2 id="Treemap">1.5Treemap</h2><p>未完待续。。。</p><h2 id="Hashtable">1.6Hashtable</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</code></pre><h3 id="与HashMap的异同">1.6.1与HashMap的异同</h3><ol><li><p>由于Hashtable年代久远，没有按驼峰式命名，且现今其Dictionary类已经废弃，故不再使用Hashtable</p></li><li><p>HashMap寻找Table位置的算法更优，效率更高</p><pre class=" language-java"><code class="language-java">HashMap<span class="token operator">:</span>   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>Hashtable<span class="token operator">:</span> Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre></li><li><p>扩容机制不同<br>HashMap：默认初始bucket为16，触发扩容后，2倍扩容</p><pre class=" language-java"><code class="language-java">            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                     oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>                newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold</span></code></pre><p>Hashtable：默认初始bucket为11，触发扩容后，2*initialCapacity+1</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> newCapacity <span class="token operator">=</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></code></pre></li><li><p>HashMap 的&lt;K,V&gt;K,V都可为空，Hashtable的却都不能为null</p><pre class=" language-java"><code class="language-java">Hashtable<span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>Hashtable 的对外所有方法均有synchironized修饰，即线程安全，</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java集合（Map） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> LinkedHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的双列集合</title>
      <link href="/posts/5561.html"/>
      <url>/posts/5561.html</url>
      
        <content type="html"><![CDATA[<h1 id="双列集合">1双列集合</h1><h2 id="常见的双列集合">1.1常见的双列集合</h2><h3 id="Set接口">1.1.1Set接口</h3><ol><li>特点：<ul><li>set对象（Set接口的实现类对象）是无序的，添加和取出的顺序不同，但取出的顺序却是固定的</li><li>由于无序，不可用普通的for循环遍历Set对象，即无get（）方法</li><li>Set类型的集合中最多有一个null值，不可有重复的元素出现</li></ul></li><li>结构示意：</li></ol><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/Set-1626518576616-1626518578627.png" alt="Set"></p><h2 id="HashSet">1.2HashSet</h2><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/HashSet-1626519009284.png" alt="HashSet"></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210719131951082-1626671995904.png" alt="image-20210719131951082"></p><h3 id="特点">1.2.1特点</h3><ol><li><p>hashSet的底层为HashMap（数组+链表+红黑树）</p></li><li><p>假如没有树化，迭代集合元素的时间与table数组的长度和链表的长度之和成正比，因此迭代性能要求高的话，不要把初始容量设置得太高（或者负载因子太低）。</p></li><li><p>类HashSet和HashMap是独立的两个类，</p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210718115742162.png" alt="HashSet和HashMap独立"></p><p><strong>HashSet为数学上集合的抽象，则不能有重复的元素，HashMap为键值对映射关系，键不可重复，只可以重复</strong></p></li><li><p>HashSet为数据的查找和修改较ArrayList和LinkedList提供了极大的方便，不能重复equals（）方法相同的元素，此时hashcode（）与equals（）兼容</p></li></ol><h3 id="HashSet源码探究">1.2.2HashSet源码探究</h3><h4 id="类的方法和属性">1.2.2.1类的方法和属性</h4><p> <strong>属性</strong>：</p><pre class=" language-java"><code class="language-java">      <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>5024744406713321676L<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">transient</span> HashMap<span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Dummy value to associate with an Object in the backing Map</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p> <strong>方法：</strong></p><pre class=" language-java"><code class="language-java"> 构造方法   <span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//指定初始长度</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//初始长度和加载因子</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//某个colllection集合</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token number">75f</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">boolean</span> dummy<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//区别于其他的int，float类型的构造器</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="无参构造的HashSet方法，添加元素机制">1.2.2.2无参构造的HashSet方法，添加元素机制</h4><ol><li>添加机制</li></ol><p>无参构造</p><ul><li>无参构造后，将会把Table数组长度设置为<code>DEFAULT_INITIAL_CAPACITY</code>(1&lt;&lt;4),但此时Table仍为null，</li><li>添加第一个元素时，将table.length设为16,</li><li>若添加的元素均为hash（<strong>此处的hash值并非Object.hasCode()<strong>）不同，当table数组（</strong>包括挂载于不同数组位置的链表</strong>）中的元素个数&gt;12,将启动第一次扩容至16*2=32.<ul><li>添加元素挂载条件：hash相同，且该条链表中equals（）为false且不同对象</li><li>12由来，取决于采用无参构造方法默认加载因子（DEFAULT_LOAD_FACTOR = 0.75f），若需改变，可采用其他含加载因子构造方法进行设置</li></ul></li><li>当出现table长度为64（<code>MIN_TREEIFY_CAPACITY</code>），且某条链表长度为8（<code>TREEIFY_THRESHOLD</code>），该条链表将进行黑白树化</li></ul><ol start="2"><li>实验代码</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"all"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HaSet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>源码探析</li></ol><ul><li><strong>进入无参构造</strong></li></ul><blockquote><p>Constructs a new, empty set; the backing HashMap instance has default initial capacity (16) and load factor (0.75).</p><p>构建一个新的、空的集合；支持的HashMap实例具有默认的初始容量（16）和负载系数（0.75）。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li><strong>调用底层的HashMap（）无参构造并设置默认无参构造的加载因子为0.75</strong></li></ul><blockquote><p>Constructs an empty HashMap with the default initial capacity (16) and the default load factor (0.75)</p><p>构建一个空的HashMap，具有默认的初始容量（16）和默认的负载系数（0.75）。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// all other fields defaulted</span>    <span class="token punctuation">}</span></code></pre><ul><li><strong>.调用map.put()方法添加元素</strong></li></ul><blockquote><p>Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if this set contains no element e2 such that Objects.equals(e, e2). If this set already contains the element, the call leaves the set unchanged and returns false.<br>Params:<br>e – element to be added to this set<br>Returns:<br>true if this set did not already contain the specified element</p><p>如果指定的元素还没有出现，则将其添加到这个集合中。更正式的说法是，如果这个集合不包含任何元素e2，使得Objects.equals(e, e2)，则将指定的元素e添加到这个集合。如果这个集合已经包含了这个元素，那么这个调用将使这个集合保持不变并返回false。<br>参数。<br>e - 要添加到这个集合中的元素<br>返回。<br>如果这个集合还没有包含指定的元素，返回true。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//PRESENT为null的Object对象</span>    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong>进入put（）方法，调用putval（）方法</strong></li></ul><blockquote><p>Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.<br>Params:<br>key – key with which the specified value is to be associated<br>value – value to be associated with the specified key<br>Returns:<br>the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)</p><p>将指定的值与该地图中指定的键关联。如果该地图以前包含一个键的映射，那么旧的值将被替换。<br>Params:<br>key - 指定的值要与之关联的键<br>value - 要与指定的键关联的值<br>返回。<br>与key关联的前一个值，如果没有key的映射，则返回null。(一个null的返回值也可以表示地图之前将null与key关联起来)。</p></blockquote><p><em>其中的hash（）方法，起到获取所要添加对象的hash值，但此hash值并非Object.hashCode（）的hash值</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Computes key.hashCode() and spreads (XORs) higher bits of hash to lower. Because the table uses power-of-two masking, sets of hashes that vary only in bits above the current mask will always collide. (Among known examples are sets of Float keys holding consecutive whole numbers in small tables.) So we apply a transform that spreads the impact of higher bits downward. There is a tradeoff between speed, utility, and quality of bit-spreading. Because many common sets of hashes are already reasonably distributed (so don’t benefit from spreading), and because we use trees to handle large sets of collisions in bins, we just XOR some shifted bits in the cheapest possible way to reduce systematic lossage, as well as to incorporate impact of the highest bits that would otherwise never be used in index calculations because of table bounds.</p><p>计算key.hashCode()并将hash的高位分散到低位。由于该表使用了2次方掩码，仅在当前掩码以上的位数不同的哈希值集将总是发生碰撞。(已知的例子包括在小表中持有连续整数的Float键的集合）。) 因此，我们应用一个转换，将高位的影响向下分散。在速度、实用性和位传播的质量之间有一个权衡。因为许多常见的哈希集已经是合理分布的（所以不受益于传播），而且因为我们使用树来处理大集的碰撞，我们只是以最便宜的方式XOR一些移位的比特，以减少系统损失，以及纳入最高比特的影响，否则由于表的界限，永远不会被用于索引计算。</p></blockquote><p><em>对象的hash值分散，避免hash值碰撞</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Implements Map.put and related methods.<br>Params:<br>hash – hash for key<br>key – the key<br>value – the value to put<br>onlyIfAbsent – if true, don’t change existing value<br>evict – if false, the table is in creation mode.<br>Returns:<br>previous value, or null if none</p><p>实现Map.put和相关方法。<br>Params:<br>hash - 密钥的哈希值<br>key - 密钥<br>value - 要放入的值<br>onlyIfAbsent - 如果为真，不改变现有值<br>evict - 如果是false，表处于创建模式。<br>返回。<br>先前的值，如果没有，则为空</p></blockquote><p><em>添加机制</em></p><pre class=" language-java"><code class="language-java">  <span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>                   <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//首次添加元素，将table长度设为16</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//由之前的hash值计算得到对象需要存放的table位置，并判</span>            <span class="token comment" spellcheck="true">//断该table位置是否为null，若为，直接添加到该位置，</span>            <span class="token comment" spellcheck="true">//若不为，进行后续判断           </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//table该位置有对象，判断添加两者hash值，对象地址，以及是否满足equals（）方法，因此添加元素至HashSet集合中时，应按需求重写对象的equals（）和hashCode（）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//若添加对象不是红黑树结点和以上情况，此时该条链表上还未发现与之“相同”的元素，应继续比较，采用for循环，遍历过程中，共两种情况：</span>                <span class="token comment" spellcheck="true">//若bincount>=8,即该链表现有至少8个结点，进入红黑树树化考虑treeifyBin(tab, hash)，若此时table中已有64个元素，则进行树化，否则，将对table扩容，继而跳出循环</span>                <span class="token comment" spellcheck="true">//若遍历过程中，存在“相同”元素，则退出循环，并返回链表该位置上的value                                        </span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>                V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断是否需要扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Initializes or doubles table size. If null, allocates in accord with initial capacity target held in field threshold. Otherwise, because we are using power-of-two expansion, the elements from each bin must either stay at same index, or move with a power of two offset in the new table.<br>Returns:<br>the table</p><p>初始化或加倍表的大小。如果为空，则按照字段阈值中的初始容量目标进行分配。否则，因为我们使用的是2次方扩展，每个bin的元素必须保持在相同的索引，或者在新表中以2次方的偏移量移动。<br>返回。<br>该表</p></blockquote><ul><li><strong>.扩容机制</strong>（无参和有参）</li></ul><p><strong>当元素HashSet集合中元素（包括table，链表，红黑树）首次达到临界值即DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY=12或者initialCapacity*loadFactor，需扩容capatity的两倍，即</strong></p><table><thead><tr><th>capatity</th><th>LOAD_FACTOR</th><th>临界值</th><th>可以链表结点为8？</th><th>现HashSet集合元素个数</th><th>是否需扩容？</th><th>newCapatity</th><th>是否树化</th></tr></thead><tbody><tr><td>16</td><td>0.47</td><td>12</td><td>Y</td><td>6</td><td>N</td><td></td><td>N</td></tr><tr><td>16</td><td>0.75</td><td>12</td><td>Y</td><td>12</td><td>Y</td><td>16*2=32</td><td>N</td></tr><tr><td>8</td><td>0.5</td><td>4</td><td>Y</td><td>3</td><td>N</td><td></td><td>N</td></tr><tr><td>8</td><td>0.5</td><td>4</td><td>Y</td><td>4</td><td>Y</td><td>8*2=16</td><td>N</td></tr><tr><td>64</td><td>0.75</td><td>48</td><td>Y</td><td>48</td><td>Y</td><td>树化</td><td>Y</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                 oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//DEFAULT_INITIAL_CAPACITY=16</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold,</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// initial capacity was placed in threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// zero initial threshold signifies using defaults</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// preserve order</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><em>无参构造添加一个元素后的table：采用默认的capatity（16）</em></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210718154425253-1626594269137-1626603667532.png" alt="image-20210718154425253"></p><h2 id="LinkedHashSet">1.3LinkedHashSet</h2><h3 id="依赖关系">1.3.1依赖关系</h3><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/LinkedHashSet-1626670657239.png" alt="LinkedHashSet"></p><blockquote><p>上图可以看出LinkedHashSet和LinkedHashMap依赖关系，但是其底层却是LinkedHasHMap，</p></blockquote><h3 id="结构">1.3.2结构</h3><ol><li>由<strong>双向链表</strong>和hash表组成，区别于HashSet的数组，链表，红黑树</li><li>由于特殊的结构，使其插入顺序和遍历顺序一致</li><li>结构示意<img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/KindedHashMap%E7%BB%93%E6%9E%84-1626675190753.png" alt="KindedHashMap结构" style="zoom: 150%;"></li></ol><p>4.示意代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashSetTest</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LinkedHashSet linkSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            linkSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"江湖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            linkSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            linkSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            linkSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"再见"</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            linkSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"End"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>5.<strong>HashMap$Node[]与HashMap$Entry[]</strong><br><strong>接口实现的关系</strong></p><blockquote><p>Basic hash bin node, used for most entries. (See below for TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</p><p>基本的哈希仓节点，用于大多数条目。(TreeNode的子类见下文，LinkedHashMap中的Entry子类见下文)。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>        <span class="token keyword">final</span> K key<span class="token punctuation">;</span>        V value<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><blockquote><p>A map entry (key-value pair). The Map.entrySet method returns a collection-view of the map, whose elements are of this class. The only way to obtain a reference to a map entry is from the iterator of this collection-view. These Map.Entry objects are valid only for the duration of the iteration; more formally, the behavior of a map entry is undefined if the backing map has been modified after the entry was returned by the iterator, except through the setValue operation on the map entry.<br>Since:<br>1.2<br>See Also:<br>entrySet()</p><p>一个地图条目（键-值对）。Map.entrySet方法返回一个地图的集合视图，其元素属于这个类别。获得对地图条目的引用的唯一方法是来自这个集合视图的迭代器。这些Map.Entry对象只在迭代期间有效；更正式地说，如果在迭代器返回该条目后，后援地图被修改了，除了通过对地图条目的setValue操作外，地图条目的行为是未定义的。<br>自从。<br>1.2<br>也请参见。<br>entrySet()</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>          V <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        K <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">]</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210719141614870-1626675376927.png" alt="image-20210719141614870"></p><p>6.<strong>LinkedHashSet</strong>底层为<strong>LinkedhashMap</strong>，则结构包括<strong>head ,tail, before,after.</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210719141756041-1626675485346.png" alt="image-20210719141756041"></p>]]></content>
      
      
      <categories>
          
          <category> java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashSet </tag>
            
            <tag> LinkedHashSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的单列集合</title>
      <link href="/posts/57bb.html"/>
      <url>/posts/57bb.html</url>
      
        <content type="html"><![CDATA[<h1 id="单列集合">1单列集合</h1><h2 id="集合类型">1.1集合类型</h2><ol><li><p>单列集合</p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/Collection-1626424718772.png" alt="Collection"></p></li><li><p>双列集合</p></li></ol><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/Map-1626424735580.png" alt="Map"></p><h2 id="单列集合-1">1.2单列集合</h2><p>###<strong>由ArrayList类讲解add()方法</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/ArrayList-1626513696006.png" alt="ArrayList"></p><ol><li><p>常见方法和属性</p><pre class=" language-java"><code class="language-java"><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//ArrayList大小</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//截取[ )的元素</span> \\\\\\属性：<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关键字transient意为瞬间，表示elementData数组不会被序列化</span></code></pre><blockquote><p>Constructs an empty list with an initial capacity of ten.</p><p>构建一个初始容量为10的空列表。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Constructs an empty list with the specified initial capacity.<br>Params:<br>initialCapacity – the initial capacity of the list<br>Throws:<br>IllegalArgumentException – if the specified initial capacity is negative</p><p>构建一个具有指定初始容量的空列表。<br>参数。<br>initialCapacity - 列表的初始容量<br>抛出。<br>IllegalArgumentException - 如果指定的初始容量是负的</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>属性：</strong></p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * Default initial capacity.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Shared empty array instance used for empty instances.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Shared empty array instance used for default sized empty instances. We     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when     * first element is added.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The array buffer into which the elements of the ArrayList are stored.     * The capacity of the ArrayList is the length of this array buffer. Any     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA     * will be expanded to DEFAULT_CAPACITY when the first element is added.     */</span>    <span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// non-private to simplify nested class access</span>    <span class="token comment" spellcheck="true">/**     * The size of the ArrayList (the number of elements it contains).     *     * @serial     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span></code></pre></li><li><p><strong>ArrayList特点</strong></p><ul><li>集合中的元素是不唯一的，（可加入多个null）有序的对象</li><li>访问和修改元素效率高，但线程不安全</li></ul></li><li><p><strong>遍历方法</strong></p><ul><li><p>普通的下标访问</p><pre class=" language-java"><code class="language-java"> ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre></li><li><p>迭代器对象访问</p><pre class=" language-java"><code class="language-java">        Iterator obj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li><li><p>增强for循环</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>普通打印</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p><strong>ArrayList添加元素源码探究</strong></p><ul><li><p>规律：其中元素存在于elementData数组中，类型为Object， 添加的元素为基本数据类型，添加前将“包装”</p></li><li><p>创建ArrayList对象</p><ul><li>若使用无参构造，则数组的初始长度为0，第一次添加元素是时，数组的容量增加为10，后续再次添加，则数组长度增加至目前长度的1.5倍</li><li>若使用有参构造，初始完后，存放的数组长度为指定大小，当添加元素至指定数组长度时，再次添加元素，将扩容目前的1.5倍。</li></ul></li><li><p>使用Arrays.copyOf()方法进行元素的添加</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>                                      <span class="token function">newCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p><strong>源码</strong></p><ol><li><p>无参构造方法</p><blockquote><p>Constructs an empty list with an initial capacity of ten</p><p>构建一个初始容量为10的空列表</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>添加实现</p><blockquote><p>This helper method split out from add(E) to keep method bytecode size under 35 (the -XX:MaxInlineSize default value), which helps when add(E) is called in a C1-compiled loop.</p><p>这个辅助方法从add(E)中分离出来，使方法的字节码大小保持在35以下（-XX:MaxInlineSize默认值），这有助于add(E)在C1编译的循环中被调用。</p></blockquote><p>进入到该方法后，elementData长度至少为10</p><ul><li><p>当初次添加元素，即if为true，<strong>进行扩容</strong>，进入<code>private Object[] grow(int minCapacity)</code><br>—&gt; <code>private int newCapacity(int minCapacity)</code></p><pre class=" language-java"><code class="language-java">        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span>                <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10</span>与<span class="token number">0</span>取最大债</code></pre><p>保证初次添加元素，elementData增加到10</p></li><li><p>第二次添加元素，if为false，直接将元素加至数组，当元素出现10个，<strong>进入扩容</strong></p></li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            elementData <span class="token operator">=</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        size <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210717174101459-1626514863267.png"></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210717174256002-1626514978606.png" alt="image-20210717174256002"></p><blockquote><p>Increases the capacity to ensure that it can hold at least the number of elements specified by the minimum capacity argument.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>增加容量，以确保它至少可以容纳最小容量参数所指定的元素数量。<br>Params:<br>minCapacity - 所需的最小容量<br>抛出。<br>OutOfMemoryError - 如果minCapacity小于0</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>                                           <span class="token function">newCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Returns a capacity at least as large as the given minimum capacity. Returns the current capacity increased by 50% if that suffices. Will not return a capacity greater than MAX_ARRAY_SIZE unless the given minimum capacity is greater than MAX_ARRAY_SIZE.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>返回一个至少与给定最小容量一样大的容量。如果足够的话，返回当前容量增加的50%。不会返回一个大于MAX_ARRAY_SIZE的容量，除非给定的最小容量大于MAX_ARRAY_SIZE。<br>Params:<br>minCapacity - 所需的最小容量<br>抛出。<br>OutOfMemoryError - 如果minCapacity小于零。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">newCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//除初次扩容外，满10个元素后，每次添加元素，扩容1.5倍</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span>                <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始长度为10</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//有无超过允许最大容量</span>            <span class="token operator">?</span> newCapacity            <span class="token operator">:</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//超过MAX_ARRAY_SIZE，仍然取MAX_ARRAY_SIZE</span>    <span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210717174511049.png" alt="image-20210717174511049"></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210717174726436-1626515259510.png" alt="image-20210717174726436"></p></li></ol></li></ol><p>6.<strong>总结</strong></p><ul><li>初次添加，elementData为10</li><li>当元素添至10 个，以后每次添加，扩容1.5倍  ，当扩至MAX_ARRAY_SIZE，将保持MAX_ARRAY_SIZE大小。          </li></ul><h3 id="LinkedList">1.2.1LinkedList</h3><h4 id="特点：实现了双向链表和双向队列">1.2.1.1特点：实现了双向链表和双向队列</h4><ul><li><p>依赖关系<br><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/LinkedList-1626501451296-1626501488898.png" alt="LinkedList"></p></li><li><p>可添加任意的元素，元素可重复</p></li><li><p>线程不安全，没有同步 </p></li><li><p>实现List接口，可对List操作</p></li><li><p>实现Queue，可对队列操作</p></li><li><p>实现Cloneable，可对LinkedList对象拷贝</p></li><li><p>实现Serializable接口，可进行数据流传输</p></li><li><p>添加和删除元素高效，因为不涉及数组的扩容</p></li><li><p><strong>属性</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Pointer to first node.     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Pointer to last node.     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span></code></pre></li><li><p><strong>常见的构造方法</strong></p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//无参 </span><span class="token keyword">public</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//有参</span><span class="token keyword">public</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p><strong>内部类</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        E item<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p><strong>常用方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将指定的元素添加到这个列表的末尾。</span><span class="token comment" spellcheck="true">//这个方法等同于addLast。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//移除这个列表中第一次出现的指定元素（当从头到尾遍历列表时）。如果列表中不包含该元素，它就不会被改变。</span><span class="token comment" spellcheck="true">//Params:</span><span class="token comment" spellcheck="true">//要从这个列表中移除的元素，如果存在的话</span>返回。    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeFirstOccurrence</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用指定的元素替换这个列表中指定位置的元素。</span><span class="token comment" spellcheck="true">//Params:</span><span class="token comment" spellcheck="true">//index - 要替换的元素的索引</span><span class="token comment" spellcheck="true">//element - 要存储在指定位置的元素</span><span class="token comment" spellcheck="true">//返回。</span><span class="token comment" spellcheck="true">//之前在指定位置的元素</span><span class="token comment" spellcheck="true">//抛出。</span><span class="token comment" spellcheck="true">//IndexOutOfBoundsException</span><span class="token comment" spellcheck="true">//</span>    <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        E oldVal <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回这个列表中指定位置的元素。</span><span class="token comment" spellcheck="true">//Params:</span><span class="token comment" spellcheck="true">//index - 要返回的元素的索引</span><span class="token comment" spellcheck="true">//返回。</span><span class="token comment" spellcheck="true">//在这个列表中指定位置的元素</span><span class="token comment" spellcheck="true">//抛出。</span><span class="token comment" spellcheck="true">//IndexOutOfBoundsException</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><h4 id="双向链表和双向队列">1.2.1.2双向链表和双向队列</h4><ol><li><strong>双向链表结构</strong><br><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210717142748254-1626503272103.png" alt="LinkedList结构"></li></ol><h4 id="以add（）方法和remove（）讲解LindedList添加和删除元素机制">1.2.1.3以add（）方法和remove（）讲解LindedList添加和删除元素机制</h4><ol><li><strong>add（）</strong></li></ol><p><strong>演示源码</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList_Eg</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用无参构造</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210717155513225-1626508516961.png" alt="无参调用后的链表内容"></p><hr><p><strong>添加函数</strong></p><blockquote><p>Appends the specified element to the end of this list.<br>This method is equivalent to addLast.<br>Params:<br>e – element to be appended to this list<br>Returns:<br>true (as specified by Collection.add)</p><p>将指定的元素添加到这个列表的末尾。<br>这个方法等同于addLast。<br>Params:<br>e - 要追加到这个列表的元素<br>返回。<br>true (由Collection.add指定)</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Links e as last element</p><p>链接e作为最后一个元素</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><p><strong>添加2个元素后的LinkedList</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210717161444263.png" alt="image-20210717161444263"></p><hr><p><strong>Linkedlist的add（）总结：</strong></p><ul><li>添加于List的last结点后</li></ul><p><strong>2.remove（）</strong></p><p><strong>演示源码</strong></p><pre class=" language-java"><code class="language-java">link<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除链表首个结点</span></code></pre><p><strong>调佣该方法删除首个结点</strong></p><p>Retrieves and removes the head (</p><blockquote><p>first element) of this list.<br>Returns:<br>the head of this list<br>Throws:<br>NoSuchElementException – if this list is empty<br>Since:</p><p>1.5</p><p>检索并删除该列表的头部（第一个元素）。<br>返回。<br>这个列表的头部<br>抛出。<br>NoSuchElementException - 如果这个列表是空的<br>自从<br>1.5</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Removes and returns the first element from this list.<br>Returns:<br>the first element from this list<br>Throws:<br>NoSuchElementException – if this list is empty</p><p><strong>移除并返回此列表中的第一个元素。</strong><br>返回。<br>这个列表中的第一个元素<br>抛出。<br>NoSuchElementException - 如果这个列表是空的</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Unlinks non-null first node f</p><p>解除非空的第一个节点f的链接</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> E <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// assert f == first &amp;&amp; f != null;</span>    <span class="token keyword">final</span> E element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    f<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>    f<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>    first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>        last <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">else</span>        next<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>    size<span class="token operator">--</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>删除首个结点后的LinkedList</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210717163539915-1626510942358.png" alt="image-20210717163539915"></p><p>总结：</p><ul><li>删除List的首个结点</li></ul><h3 id="Vector">1.2.2Vector</h3><h4 id="特点">1.2.2.1特点</h4><ul><li><p>线程安全的，Vector中的所有Public方法均有synchronized修饰，保证线程安全</p></li><li><p>依赖关系</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</code></pre></li></ul><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/Vector-1626485881012.png" alt="Vector"></p><h4 id="以add（）讲解Vector源码">1.2.2.2以add（）讲解Vector源码</h4><h5 id="实现代码（采用无参构造）">1.2.2.2.1实现代码（采用无参构造）</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"all"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector_Eg</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Vector vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无参构造</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>#####<strong>源码实现逻辑</strong></p><ol><li><strong>类加载</strong></li></ol><blockquote><p>Loads the class with the specified binary name. This method searches for classes in the same manner as the loadClass(String, boolean) method. It is invoked by the Java virtual machine to resolve class references. Invoking this method is equivalent to invoking loadClass(name, false).<br>Params:<br>name – The binary name of the class<br>Returns:<br>The resulting Class object<br>Throws:<br>ClassNotFoundException – If the class was not found</p><p>以指定的二进制名称加载类。这个方法以与loadClass(String, boolean)方法相同的方式搜索类。它被Java虚拟机调用以解析类的引用。调用此方法等同于调用loadClass(name, false)。<br>参数。<br>name - 类的二进制名称<br>返回。<br>得到的类对象<br>抛出。<br>ClassNotFoundException - 如果没有找到该类。</p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Invoked by the VM after loading class with this loader</p><p>在用这个加载器加载类之后，由虚拟机调用</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPackageAccess</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token punctuation">,</span> ProtectionDomain pd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> SecurityManager sm <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ReflectUtil<span class="token punctuation">.</span><span class="token function">isNonPublicProxyClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> intf<span class="token operator">:</span> cls<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">checkPackageAccess</span><span class="token punctuation">(</span>intf<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> String packageName <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>packageName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">public</span> Void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        sm<span class="token punctuation">.</span><span class="token function">checkPackageAccess</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AccessControlContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProtectionDomain</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>pd<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><ol start="2"><li><p><strong>调用无参构造，创建初始容量为10的数组elementData，<code>protected Object[] elementData;</code></strong><br>  <strong>（为Vector类中的储存向量成分的数组缓冲区。矢量的容量是这个数组缓冲区的长度，至少要大到足以容纳该矢量的所有元素。<em>矢量中最后一个元素之后的任何数组元素都是null</em>）、</strong></p><blockquote><p>Constructs an empty vector so that its internal data array has size 10 and its standard capacity increment is zero.</p><p>构建一个空向量，使其内部数据阵列的大小为10，其标准容量增量为0。</p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Constructs an empty vector with the specified initial capacity and capacity increment.<br>Params:<br>initialCapacity – the initial capacity of the vector<br>capacityIncrement – the amount by which the capacity is increased when the vector overflows<br>Throws:<br>IllegalArgumentException – if the specified initial capacity is negative</p><p>用指定的初始容量和容量增量构造一个空向量。<br>参数。<br>initialCapacity - 向量的初始容量<br>capacityIncrement - 当向量溢出时，容量增加的数量。<br>抛出。<br>IllegalArgumentException - 如果指定的初始容量是负的</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">int</span> capacityIncrement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacityIncrement <span class="token operator">=</span> capacityIncrement<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><hr><p>3.<strong>由于加入的数据对象为基本数据类型，将要“包装”</strong></p><blockquote><p>Returns an Integer instance representing the specified int value. If a new Integer instance is not required, this method should generally be used in preference to the constructor Integer(int), as this method is likely to yield significantly better space and time performance by caching frequently requested values. This method will always cache values in the range -128 to 127, inclusive, and may cache other values outside of this range.<br>Params:<br>i – an int value.<br>Returns:<br>an Integer instance representing i.<br>Since:<br>1.5</p><p>返回一个代表指定int值的Integer实例。如果不需要一个新的Integer实例，通常应该优先使用这个方法，而不是构造函数Integer(int)，因为这个方法通过缓存频繁请求的值，可能会产生明显更好的空间和时间性能。这个方法将始终缓存-128到127（包括）范围内的值，并可能缓存这个范围之外的其他值。<br>Params:<br>i - 一个int值。<br>返回。<br>一个Integer实例，代表i。<br>自从。<br>1.5</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@HotSpotIntrinsicCandidate</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>            <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="4"><li><strong>正式进入添加方法</strong></li></ol><blockquote><p>Appends the specified element to the end of this Vector.<br>Params:<br>e – element to be appended to this Vector<br>Returns:<br>true (as specified by Collection.add)<br>Since:<br>1.2</p><p>将指定的元素追加到这个Vector的末尾。<br>Params:<br>e - 要追加到这个Vector的元素<br>返回。<br>true (由Collection.add指定)<br>自从。<br>1.2</p></blockquote><pre class=" language-jav"><code class="language-jav">    public synchronized boolean add(E e) {        modCount++;        add(e, elementData, elementCount);        return true;    </code></pre><blockquote><p>This helper method split out from add(E) to keep method bytecode size under 35 (the -XX:MaxInlineSize default value), which helps when add(E) is called in a C1-compiled loop.</p><p>这个辅助方法从add(E)中分离出来，使方法的字节码大小保持在35以下（-XX:MaxInlineSize默认值），这有助于add(E)在C1编译的循环中被调用。</p></blockquote><ul><li><strong>统计当前elementData数组的长度，记为elementCount（形参s），与此时的elementData长度比较，若不等，则添加新元素至elementData中；若此时长度已至10，需扩容</strong></li></ul><pre class=" language-java"><code class="language-java">将elemenData数组的长度与所需的长度比较，    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true,则扩容</span>            elementData <span class="token operator">=</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        elementCount <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><pre class=" language-java"><code class="language-java">实现代码部分：<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>循环执行<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span>方法，当所需数组长度<span class="token operator">></span><span class="token number">10</span>时，扩容。。。</code></pre></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">grow</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Increases the capacity to ensure that it can hold at least the number of elements specified by the minimum capacity argument.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>增加容量，以确保它至少可以容纳最小容量参数所指定的元素数量。<br>Params:<br><strong>minCapacity - 所需的最小容量</strong><br>抛出。<br>OutOfMemoryError - 如果minCapacity小于0</p></blockquote><ul><li><strong>以当前所需的最小长度为参，构建一个扩容后的elementData数组</strong></li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>                                           <span class="token function">newCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Returns a capacity at least as large as the given minimum capacity. Will not return a capacity greater than MAX_ARRAY_SIZE unless the given minimum capacity is greater than MAX_ARRAY_SIZE.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>返回一个至少与给定最小容量一样大的容量。不会返回大于MAX_ARRAY_SIZE的容量，除非给定的最小容量大于MAX_ARRAY_SIZE。<br>Params:<br>minCapacity - 所需的最小容量<br>抛出。<br>OutOfMemoryError - 如果minCapacity小于零。</p></blockquote><ul><li><strong>当elementData长度未达到10，不会进入到该方法，即不需扩容</strong></li><li><strong>当容量增量（capacityIncrement）小于或等于零，每次需要增长时，数组（elementData）的容量就会增加一倍。</strong></li><li><strong>判断newCapacity与minCapacity，若扩容后任然小于所需的最小长度，在判断是否是计算出错，出错则抛出OutOfMemoryError，并返回minCapacity</strong></li><li><strong>若无上述错误，判断扩容2倍后的newCapacity是否大于MAX_ARRAY_SIZE，</strong></li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">newCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>capacityIncrement <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                         capacityIncrement <span class="token operator">:</span> oldCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token operator">?</span> newCapacity<span class="token comment" spellcheck="true">// return minest capacity</span>            <span class="token operator">:</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 后续处理,其实都返回2147183639</span>    <span class="token punctuation">}</span></code></pre><blockquote><pre class=" language-java"><code class="language-java">   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token comment" spellcheck="true">//MAX_ARRAY_SIZE=2147483639</span>           Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>           MAX_ARRAY_SIZE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2147483639</span>   <span class="token punctuation">}</span></code></pre></blockquote><ul><li><strong>Arrays类的copyOf（）实现</strong></li></ul><blockquote><p>复制指定的数组，截断或用空值填充（如果需要），使副本具有指定的长度。对于所有在原始数组和副本中都有效的索引，这两个数组将包含相同的值。对于任何在副本中有效但在原始数组中无效的指数，副本将包含空值。当且仅当指定的长度大于原始数组的长度时，这些索引才会存在。产生的数组是newType类型的。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@HotSpotIntrinsicCandidate</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span>U<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span>U<span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> newType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        T<span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span>newType <span class="token operator">==</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token operator">?</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>newType<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                         Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> copy<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>扩容返回的<code>copy</code>数组</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210717113734573.png" alt="image-20210717113734573"></p><p><strong>扩容后的elementData数组</strong></p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210717113851343.png" alt="image-20210717113851343" style="zoom:80%;"><p><strong>添加了11个元素</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E9%9B%86%E5%90%88/image-20210822214905230.png" alt="image-20210822214905230"></p><p>5.<strong>Vector 的add（）总结</strong></p><p>无参构造</p><ul><li>初始为10</li><li>大于10后，扩容，每次添加元素，element数组扩容2倍</li></ul><p>有参构造</p><ul><li>初始为指定长度,到达指定长度后，扩为10个，</li><li>大于10后，每次扩容，element数组扩容2倍</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">int</span> capacityIncrement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacityIncrement <span class="token operator">=</span> capacityIncrement<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArrayList </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型类和泛型方法</title>
      <link href="/posts/1791.html"/>
      <url>/posts/1791.html</url>
      
        <content type="html"><![CDATA[<h2 id="泛型优点">0.1泛型优点</h2><ol><li><p>增强代码的可读性</p></li><li><p>使程序更安全，假如创建一个String类型的数组</p><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span></code></pre><p>由于数组的多态性，可以向上转型为Obeject</p><pre class=" language-java"><code class="language-java">Object<span class="token punctuation">[</span><span class="token punctuation">]</span> o<span class="token operator">=</span>s<span class="token punctuation">;</span></code></pre><p>此时就可在o中假如任何的对象，当由s想要获得String类型时，必须使用强制类型转换，</p></li><li><p>菱形语句</p><pre class=" language-java"><code class="language-java">var files <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArraryList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>代码可读性高，容易知道files储存的就为String类型的元素</p></li></ol><h2 id="泛型实现方式">0.2泛型实现方式</h2><ol><li>类型擦除</li></ol><blockquote><p>对于数组，声明时的类型，将会转交给虚拟机，对数组操作时，将检查类型，定义的泛型类型，编译时将会把类型变量擦除，并替换为就近的限定类型，若无限定类型，则默认为Object</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">></span> Pair<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getMiddle</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">)</span></code></pre><p>   变量擦除后：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Pair<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token function">getMiddle</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span>list<span class="token punctuation">)</span></code></pre><ol start="2"><li><p>类型擦除带来的缺点</p><ul><li><p>不可创建泛型类型的数组，但可以声明泛型的变量</p><pre class=" language-java"><code class="language-java">var list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//编译错误</span>Student<span class="token operator">&lt;</span>People<span class="token operator">></span> aStudent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span></code></pre><p>虽然可以对声明通配符的数组进行强制类型转换，但容易出现ClassCastException，即类型转换异常</p><pre class=" language-java"><code class="language-java">var tabel<span class="token operator">=</span><span class="token punctuation">(</span>Student<span class="token operator">&lt;</span>Peoele<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li><li><p>不可用于含有泛型的类型比较，如instanceof  和==等</p></li></ul></li><li><p>不可用8中基本数据类型作为泛型变量，用基本数据类型作为泛型变量，类型擦除后为Object，但Object为引用数据类型，不可存储基本数据类型</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译错误</span></code></pre><h2 id="泛型类">0.3泛型类</h2><h3 id="结构">0.3.1结构</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> T first<span class="token punctuation">;</span>   <span class="token keyword">private</span> T second<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> first <span class="token operator">=</span> null<span class="token punctuation">;</span> second <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token function">Pair</span><span class="token punctuation">(</span>T first<span class="token punctuation">,</span> T second<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> T <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> first<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> T <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> second<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirst</span><span class="token punctuation">(</span>T newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span> first <span class="token operator">=</span> newValue<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSecond</span><span class="token punctuation">(</span>T newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span> second <span class="token operator">=</span> newValue<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>泛型类型一般为大写字母表示，java库中E表集合元素；K和V表键值对；T表任意类型，也可用U和S</p></blockquote><h2 id="泛型方法">0.4泛型方法</h2><p>1.列举</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//由于T的类型max和min需要调用compareTo方法，故给T限定类型为Comparable</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">></span> Pair<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getMiddle</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>list<span class="token operator">==</span>null<span class="token punctuation">)</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      T min<span class="token operator">=</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      T max<span class="token operator">=</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> min<span class="token operator">=</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用comapreTo方法</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> max<span class="token operator">=</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="2"><li><p>泛型方法结构说明</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//&lt;T,E extends Comparable&amp;Serializable&amp;Object> &lt;T extends 限定类型></span><span class="token comment" spellcheck="true">//2. Serializable</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//3. Cloneable</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//4. RandomAccess</span><span class="token comment" spellcheck="true">//标签接口在限定类型应放在最后，T的类型就近原则，若无给定限定类型，则默认为Object</span><span class="token comment" spellcheck="true">//</span></code></pre><ul><li>采用&lt;T extends 限定类型&gt;,存在多个限定类型时，<strong>用&amp;连接</strong>；存在多个类型变量，<strong>用,隔开</strong>；应将标记接口放于最后常见的标记接口有RandomAccess， Cloneable，Serializable</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token punctuation">,</span>E <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&amp;</span>Serializable<span class="token operator">&amp;</span>Object<span class="token operator">></span></code></pre><ul><li>存在多个限定类型时，类型变量的类型为就近原则；若无限定类型，默认为object</li></ul></li></ol><p>3.桥方法和编译器中的强制类型转换</p><ul><li>编译器的强制类型转换</li></ul><pre class=" language-java"><code class="language-java">People<span class="token operator">&lt;</span>Student<span class="token operator">></span> s<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>Student aStudent<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//擦除后s.getStudent();的调用返回object类型</span><span class="token comment" spellcheck="true">//编译器将Object强制类型转换Student</span></code></pre><ul><li>桥方法的应用</li></ul><blockquote><p>对于泛型类之间的继承关系，重写父类的方法非常常见，若子类方法头时申明父类的泛型类型，则会在重写方法中带有该泛型</p><p>反之，则重写方法参数为Object,此时该方法称为桥方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericType_Switch</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String first<span class="token punctuation">;</span>    <span class="token keyword">private</span> String second<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GenericType_Switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">GenericType_Switch</span><span class="token punctuation">(</span>String first<span class="token punctuation">,</span> String second<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token operator">=</span>first<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token operator">=</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirst</span><span class="token punctuation">(</span>String first<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token operator">=</span>first<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSecond</span><span class="token punctuation">(</span>String second<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token operator">=</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//若调用e.getFirst（）,将会得到Object类型，编译器将会自动出入转换到T类型的强制类型转换</span>    <span class="token keyword">public</span> String <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">GenericType_Switch</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//没指定T的类型</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Zi zi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GenericType_Switch fu<span class="token operator">=</span>zi<span class="token punctuation">;</span>        fu<span class="token punctuation">.</span><span class="token function">setFirst</span><span class="token punctuation">(</span><span class="token string">"江湖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重写泛型类GenericType_Switch的setFirst（）方法，将会在Zi类中产生一个桥方法，即Object类型形参的setFirst（）</span>            <span class="token comment" spellcheck="true">//重写父类GenericType_Switch的setFirst（）</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirst</span><span class="token punctuation">(</span>String first<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setFirst</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>子类方法头时没有申明父类的泛型类型</p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E6%B3%9B%E5%9E%8B/image-20210726191552025-1627298155172.png" alt="image-20210726191552025"></p><h2 id="泛型类型的继承规则">0.5泛型类型的继承规则</h2><ol><li><p>普通的父子类中，可以通过多态，实现向上和向下转型来改变对象的权限。当然，对于向数组这样的强类型，编译器严格表明原本的类型，只可以存储数组声明时的类型对象;否则将会java.lang.ArrayStoreException</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Generic_Code<span class="token punctuation">.</span>Array_Inherit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/7/27 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> fu<span class="token punctuation">[</span><span class="token punctuation">]</span> fus<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">fu</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> zi<span class="token punctuation">[</span><span class="token punctuation">]</span> zis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">zi</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     fu<span class="token punctuation">[</span><span class="token punctuation">]</span> f<span class="token operator">=</span>zis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f引自zi类型的数组</span>        zi newZi<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fu newFu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>newZi<span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>newFu<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向zi类型的数组传入fu类对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">fu</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">zi</span> <span class="token keyword">extends</span> <span class="token class-name">fu</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ol><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E6%B3%9B%E5%9E%8B/image-20210727115220294-1627357944453.png" alt="image-20210727115220294"></p><p>2.<strong>泛型类型继承</strong></p><ul><li><p>对于拥有继承关系的两个类，当两个类分别作为泛型变量时，此时，两者无任何关系</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">zi</span> <span class="token keyword">extends</span> <span class="token class-name">fu</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Pair<span class="token operator">&lt;</span>zi<span class="token operator">></span> 与pair<span class="token operator">&lt;</span>fu<span class="token operator">></span>无任何关系Pair<span class="token operator">&lt;</span>fu<span class="token operator">></span> error<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">pair</span><span class="token operator">&lt;</span>zi<span class="token operator">></span><span class="token comment" spellcheck="true">//错误</span></code></pre></li></ul><h2 id="通配符类型">0.6通配符类型</h2><h3 id="通配符的映入">0.6.1通配符的映入</h3><p>1.对泛型的引入解决代码的安全性做出让步，降低泛型的使用难度<br>格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printname</span><span class="token punctuation">(</span>Pair<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">fu</span><span class="token operator">></span> p<span class="token punctuation">)</span></code></pre><p>此时，父类中的方法有</p><pre class=" language-java"><code class="language-java"><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">fu</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setName</span> <span class="token punctuation">(</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">fu</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>更改器set拒绝任何对象访问其中？的类型无法确定，访问器get可返回任意类型</p><p>2.区别于extends ，可用super关键字代替，进行通配符类型的限定</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printname</span><span class="token punctuation">(</span>Pair<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> fu<span class="token operator">></span> p<span class="token punctuation">)</span>此时get方法只接受父类本身对象或者子类对象，对访问的泛型范围进行限定</code></pre><p>3.更为详尽的写法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comaparble</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> T <span class="token function">methodName</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>也可：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comaparble</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">>></span> T <span class="token function">methodName</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>这样使得Comparable中的方法，比如： <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">)</span>更具有明确的类型</code></pre><h3 id="无限定的通配符">0.6.2无限定的通配符</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printname</span><span class="token punctuation">(</span>Pair<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> p<span class="token punctuation">)</span>    此时    <span class="token operator">?</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span>    只可以使用get</code></pre>]]></content>
      
      
      <categories>
          
          <category> 泛型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛型 </tag>
            
            <tag> 泛型方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/posts/3825.html"/>
      <url>/posts/3825.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> -Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射和注解</title>
      <link href="/posts/ad63.html"/>
      <url>/posts/ad63.html</url>
      
        <content type="html"><![CDATA[<h1 id="反射和注解">1反射和注解</h1><h2 id="反射">1.1反射</h2><h3 id="反射的引入">1.1.1反射的引入</h3><ol><li>在程序<strong>运行时</strong>动态加载类并获取类的详细信息，从而更好的操作<strong>类或对象的属性和方法</strong></li><li>使用反射机制可以动态获取当前class的信息 比如方法的信息、注解信息、方法的参数、属性等</li><li>目的：提供开发者能够更好封装框架实现扩展功能</li></ol><h3 id="反射优缺点">1.1.2反射优缺点</h3><ol><li>优点：<ul><li>可以实现动态创建对象和编译，体现出很大的灵活性</li></ul></li><li>缺点<ul><li>运行时告诉JVM想要做什么总是慢于直接直接执行</li><li>反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题<a href="#%E5%BC%95%E5%85%A5%E5%8F%8D%E5%B0%84%E5%B8%A6%E6%9D%A5%E9%BA%BB%E7%83%A6%EF%BC%88%E7%9B%AE%E5%89%8D%E4%B8%80%E7%82%B9%EF%BC%89">点击跳转</a></li></ul></li></ol><h3 id="利用反射机制获取类的信息">1.1.3利用反射机制获取类的信息</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Reflection_<span class="token punctuation">.</span>Fields_AND_Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/7/28 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String <span class="token function">reflectionMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token operator">+</span>s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Employee{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Reflection_<span class="token punctuation">.</span>Fields_AND_Method<span class="token punctuation">;</span><span class="token keyword">import</span> Throwable_<span class="token punctuation">.</span>E<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/7/28 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span>            IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        Employee employee1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token operator">></span> aClass <span class="token operator">=</span> employee1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employeeClass <span class="token operator">=</span> Employee<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Reflection_.Fields_AND_Method.Employee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass1<span class="token operator">==</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token operator">==</span>employeeClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true 编译Employee类后只会有一个.class文件，</span>        <span class="token comment" spellcheck="true">//JVM为每一个类创建只创建一个Class对象，不管是foName（），还是getClass（）或者.class获得到的对象变量都指向</span>        <span class="token comment" spellcheck="true">// 同一个Class对象</span>        <span class="token comment" spellcheck="true">//forName（）方法使用较多</span>        Employee instance <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由于aClass由无参的getClass（）获得，调用newInstance（）将调用Employee类的无参构造器,若类中没有无参构造方法，将抛出异常</span>        <span class="token comment" spellcheck="true">//java9以后该方法已被废弃了</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token operator">==</span>employee1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false，由反射构建的类实例对象和类构造器构建的对象内存地址不同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//out:  Employee{name='null', age=0}</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass2 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Reflection_.Fields_AND_Method.Employee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var constructor <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee instance1 <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span>constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"姜"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Employee{name='姜', age=14}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getField,getConstructor,getMethod()将会返回按当前类，实现接口，父类顺序</span>        <span class="token comment" spellcheck="true">// 且为public标识查找，若无，抛出NoSuchFieldException</span>        Field heer <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//public boolean Reflection_.Fields_AND_Method.Employee.sex</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor1 <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//public Reflection_.Fields_AND_Method.Employee(java.lang.String,int)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// .getFields、getMethods和getCostructors方法</span>        <span class="token comment" spellcheck="true">// 可以获得类提供的public域、方法和构造器数组，其中包括超类的共有成员</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getDeclatedFields、getDeclatedMethods和getDeclaredConstructors方法</span>        <span class="token comment" spellcheck="true">// 可以获得类中声明的全部域、方法和构造器，其中包括私有和受保护的成员，但不包括超类的成员。</span>        <span class="token comment" spellcheck="true">//可以用反射为属性赋值</span>        Field name <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee o <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> aClass2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//由于在Employee类中的name属性为private则修改访问权限,否则IllegalAccessException</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Employee{name='jack', age=0}</span>        <span class="token comment" spellcheck="true">//利用反射调用方法</span>        Method method <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"reflectionMethod"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//私有方法，需要重新设置权限</span>        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">,</span> <span class="token string">"反射方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>invoke<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>1.每个类编译后都只有一个.class文件，则利用下列3中方法获取得到的Class对象变量拥有<strong>相同的引用</strong></p><pre class=" language-java"><code class="language-java">Employee employee1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token operator">></span> aClass <span class="token operator">=</span> employee1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employeeClass <span class="token operator">=</span> Employee<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Reflection_.Fields_AND_Method.Employee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//forName（）方法使用较多</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass1<span class="token operator">==</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token operator">==</span>employeeClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><p>2.Class对象获得类实例</p><pre class=" language-java"><code class="language-java">Employee instance <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由于aClass由无参的getClass（）获得，调用newInstance（）将调用Employee类的无参构造器,若类中没有无参构造方法，将抛出异常</span>        <span class="token comment" spellcheck="true">//java9以后该方法已被废弃了</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass2 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Reflection_.Fields_AND_Method.Employee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var constructor <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Employee instance1 <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span>constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"姜"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Employee{name='姜', age=14}</span></code></pre><p>3.常用获取类信息的方法</p><blockquote><p>getField,getConstructor,getMethod().<br>        getFields、getMethods和getCostructors方法<br>        getDeclatedFields ，getDeclatedMethods和getDeclaredConstructors方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//getField,getConstructor,getMethod()将会返回按当前类，实现接口，父类顺序</span>        <span class="token comment" spellcheck="true">// 且为public标识查找，若无，抛出NoSuchFieldException</span>        Field heer <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//public boolean Reflection_.Fields_AND_Method.Employee.sex</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor1 <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//out:public Reflection_.Fields_AND_Method.Employee(java.lang.String,int)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// .getFields、getMethods和getCostructors方法</span>        <span class="token comment" spellcheck="true">// 可以获得类提供的public域、方法和构造器数组，其中包括超类的共有成员</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getDeclatedFields、getDeclatedMethods和getDeclaredConstructors方法</span>        <span class="token comment" spellcheck="true">// 可以获得类中声明的全部域、方法和构造器，其中包括私有和受保护的成员，但不包括超类的成员。</span></code></pre><p>4.为类信息赋值</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//可以用反射为属性赋值</span>        Field name <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee o <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> aClass2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//由于在Employee类中的name属性为private则修改访问权限,否则IllegalAccessException</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Employee{name='jack', age=0}</span>        <span class="token comment" spellcheck="true">//利用反射调用方法</span>        Method method <span class="token operator">=</span> aClass2<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"reflectionMethod"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//私有方法，需要重新设置权限</span>        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">,</span> <span class="token string">"反射方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>invoke<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="引入反射带来麻烦（目前一点）">1.1.4引入反射带来麻烦（目前一点）</h3><p><a href="#%E5%8F%8D%E5%B0%84%E4%BC%98%E7%BC%BA%E7%82%B9">点击跳转反射带来的优缺点</a></p><ol><li><p>破坏封装性，打破类的思想</p></li><li><p>可以越过泛型的检查，添加非泛型约束对象，这是由于泛型为编译时检查，而非运行时检查</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Reflection_<span class="token punctuation">.</span>Fields_AND_Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/7/28 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericStyle_reflection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"keyboys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*        for (String s : list) {            System.out.println(s);        }        Iterator&lt;String> iterator = list.iterator();        while(iterator.hasNext()){            System.out.println((String)iterator.next());        }        list.forEach((v)-> System.out.println(v));*/</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayList</span><span class="token operator">></span> classVar <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList ins <span class="token operator">=</span> classVar<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method addMethodVar <span class="token operator">=</span> classVar<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        addMethodVar<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>ins<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        <span class="token comment" spellcheck="true">//addMethodVar.invoke(ins,145121); 这是错误的invoke（）方法使用，</span>        <span class="token comment" spellcheck="true">//public Object invoke(Object obj, Object... args),使用反射调用方法，最终还是使用类的对象调用方法，而invoke()中的Obj参数为ArrayList类的对象，即为list变量，而不应该时ArrayList类的实例</span>      <span class="token comment" spellcheck="true">//  list.forEach((v)-> System.out.println(v));</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当<code>addMethodVar.invoke(list,6);</code></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/image-20210728194019680.png" alt="image-20210728194019680"></p></li></ol><h2 id="注解">1.2注解</h2><h3 id="注解的概念">1.2.1注解的概念</h3><p>1.注解是一种元数据形式，同类，接口，基本数据类型，都为java的一种数据类型<br>2.可用标注类，接口，变量，方法，包，方法，参数<br>3.同Javadoc的区别：</p><ul><li>注解支持自定义，可以工作于编译.class文件，以及运行时</li></ul><h3 id="注解的依赖关系">1.2.2注解的依赖关系</h3><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/image-20210731123909793-1627706373879.png" alt="image-20210731123909793"></p><p>####每个annatation都有一个RetentionPolicy属性（SOURCE，CLASS，RUNTIME），若干个ElementType属性（TYPE等）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> RetentionPolicy <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 能被编译器检查     */</span>    SOURCE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     *被编译器保存至字节码文件中，但不会保持至VM运行时，是默认的注解属性     */</span>    CLASS<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**      * 注释将由编译器记录在类文件中，并在运行时由虚拟机保留。 在运行时由虚拟机保留，因此它们可以被反射    *性地读取。     * @see java.lang.reflect.AnnotatedElement     */</span>    RUNTIME<span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> ElementType <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Class, interface (including annotation type), or enum declaration .annotation type则可以嵌套使用*/</span>    TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Field declaration (includes enum constants) */</span>    FIELD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Method declaration */</span>    METHOD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Formal parameter declaration */</span>    PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Constructor declaration */</span>    CONSTRUCTOR<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Local variable declaration */</span>    LOCAL_VARIABLE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Annotation type declaration */</span>    ANNOTATION_TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Package declaration */</span>    PACKAGE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Type parameter declaration     *     * @since 1.8     */</span>    TYPE_PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Use of a type     *     * @since 1.8     */</span>    TYPE_USE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Module declaration.     *     * @since 9     */</span>    MODULE<span class="token punctuation">}</span></code></pre><p>####元注解（Target，Documeted，Retention，Inherited）</p><pre class=" language-java"><code class="language-java">例子：<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注解可用于类，接口，注解类型，枚举类</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//默认为CLASS</span><span class="token annotation punctuation">@Documented</span><span class="token comment" spellcheck="true">//可被生成与Javadoc中</span><span class="token annotation punctuation">@Inherited</span><span class="token comment" spellcheck="true">//该注解可被继承</span>@<span class="token keyword">interface</span> <span class="token class-name">des</span><span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">habits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@des</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">faf</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="注解使用">1.2.3注解使用</h3><h4 id="步骤">1.2.3.1步骤</h4><ol><li>定义注解</li><li>配置注解</li><li>解析注解</li></ol><h4 id="自定义注解">1.2.3.2自定义注解</h4><h5 id="注解类型只能为基本数据类型（byte，short，int-，long，float，double，char），String，enum，Class，注解类型，及以上类型的数组">1.2.3.2.1注解类型只能为基本数据类型（byte，short，int ，long，float，double，char），String，enum，Class，注解类型，及以上类型的数组</h5><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/image-20210731140835919-1627711717794.png" alt="image-20210731140835919"></p><p>#####注解可为模块，包，类，接口，参数，等添加，主要是ElementType中的成员</p><p><a href="#%E6%AF%8F%E4%B8%AAannatation%E9%83%BD%E6%9C%89%E4%B8%80%E4%B8%AARetentionPolicy%E5%B1%9E%E6%80%A7%EF%BC%88SOURCE%EF%BC%8CCLASS%EF%BC%8CRUNTIME%EF%BC%89%EF%BC%8C%E8%8B%A5%E5%B9%B2%E4%B8%AAElementType%E5%B1%9E%E6%80%A7%EF%BC%88TYPE%E7%AD%89%EF%BC%89">点击跳转ElementType</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> ElementType<span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>#####注解使用的特殊情况</p><h6 id="注解中没有注解类型">1.2.3.2.1.1注解中没有注解类型</h6><pre class=" language-java"><code class="language-java">例子：<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注解可用于类，接口，注解类型，枚举类</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//默认为CLASS</span><span class="token annotation punctuation">@Documented</span><span class="token comment" spellcheck="true">//可被生成与Javadoc中</span><span class="token annotation punctuation">@Inherited</span><span class="token comment" spellcheck="true">//该注解可被继承</span>@<span class="token keyword">interface</span> <span class="token class-name">des</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@des</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">faf</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>                </code></pre><p>######注解中只有一个注解类型，且命名为value</p><pre class=" language-java"><code class="language-java">例子：<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注解可用于类，接口，注解类型，枚举类</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//默认为CLASS</span><span class="token annotation punctuation">@Documented</span><span class="token comment" spellcheck="true">//可被生成与Javadoc中</span><span class="token annotation punctuation">@Inherited</span><span class="token comment" spellcheck="true">//该注解可被继承</span>@<span class="token keyword">interface</span> <span class="token class-name">des</span><span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@des</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Annotation"</span><span class="token punctuation">,</span><span class="token string">"another"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">faf</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="如果一个注解的-Target是定义为Element-PACKAGE，这个注解是配置在package-info-java中的">1.2.3.2.1.2如果一个注解的@Target是定义为Element.PACKAGE，这个注解是配置在package-info.java中的</h6><h4 id="例子">1.2.3.3例子</h4><h4 id="java内的注解使用">1.2.3.4java内的注解使用</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> date<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner_Annotation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Java/%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/image-20210731143400745-1627713242676.png" alt="image-20210731143400745"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@override</span><span class="token comment" spellcheck="true">//自定义的异常类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateFormatException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">RateFormatException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"rate is invalid format"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"rate's format is invalid "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exception</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Throwable</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>####自定义注解</p><blockquote><p>需求：</p><p>有一个Employee类，该类有一个方法注解用于获取Employee对象的一些属性；有一Out类中的方法被Employee中的注解标注，该方法用于打印Employee对象信息。编写一个测试类，利用反射检测Employee类中是否存在方法注解，若存在，则打印当前的对象信息；反之，则输出不存在任何方法注解。</p></blockquote><p>Employee类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Annotation_<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/7/31 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//该注解用于方法</span><span class="token annotation punctuation">@Documented</span><span class="token comment" spellcheck="true">//可生成与Javadoc中</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//该注解作用至代码运行时，故可与反射同时使用</span>@<span class="token keyword">interface</span> <span class="token class-name">infor</span><span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"null"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">habits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token string">"null"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为字符串数组</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> ArrayList habits<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ArrayList属性</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ArrayList <span class="token function">getHabits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> habits<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHabits</span><span class="token punctuation">(</span>ArrayList habits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>habits <span class="token operator">=</span> habits<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Out类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Annotation_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/7/31 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Out</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@infor</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Arx"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span>habits<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"乒乓球，跑步"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">out_for</span><span class="token punctuation">(</span>Employee em<span class="token punctuation">)</span><span class="token punctuation">{</span>        String employee <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"I`m %s who like %s ,and only %s years old"</span>                <span class="token punctuation">,</span>em<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>em<span class="token punctuation">.</span><span class="token function">getHabits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>em<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Annotation_<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/7/31 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span>            NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Employee的Class对象</span>        Class<span class="token operator">&lt;</span>Employee<span class="token operator">></span> s <span class="token operator">=</span> Employee<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Out的Class对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass <span class="token operator">=</span> Out<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//利用反射获得Out中的“out_for”方法的Method对象，</span>        <span class="token comment" spellcheck="true">//public Method getDeclaredMethod(String name, Class&lt;?>... parameterTypes)</span>        <span class="token comment" spellcheck="true">//第二个形参带入s，否则会出现NoSuchMethodException，由于该注解定义在Employee类中</span>        Method outMethod <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"out_for"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//outMethod对象（Out类中out_for方法）是否存在于@infor的注解</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>outMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>infor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no such @infor innotation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Employee employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得infor注解的对象</span>        infor annotation <span class="token operator">=</span> outMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>infor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注解对象.注解属性的方式获得属性值 annotation.name()</span>        employee<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employee<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由于Employee类中的属性habits为ArrayList，而注解属性habits()为String[]，且不能为ArrayList[]</span>        <span class="token comment" spellcheck="true">//故调用Arrays.asList（）方法进行转换</span>        employee<span class="token punctuation">.</span><span class="token function">setHabits</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">habits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Out out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//利用Method类中invoke（）执行Out类中out_for（）方法</span>        outMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="注解理解">1.2.3.5注解理解</h4><ol><li><p>所有的自定义注解都实现了Annotation接口。即为接口 extends 接口</p></li><li><p>当创建注解类的实例时，如getAnnotation（）方法，JDK 是通过动态代理机制生成一个实现我们注解（接口）的代理类</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 反射和注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" rel="external nofollow noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noreferrer">GitHub</a>.</p><h2 id="Quick-Start">0.1Quick Start</h2><h3 id="Create-a-new-post">0.1.1Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noreferrer">Writing</a></p><h3 id="Run-server">0.1.2Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noreferrer">Server</a></p><h3 id="Generate-static-files">0.1.3Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noreferrer">Generating</a></p><h3 id="Deploy-to-remote-sites">0.1.4Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" rel="external nofollow noreferrer">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>并发基础</title>
      <link href="/posts/ef40.html"/>
      <url>/posts/ef40.html</url>
      
        <content type="html"><![CDATA[<h1 id="并发">1并发</h1><h2 id="基础概念">1.1基础概念</h2><p><strong>进程</strong>：进程是一个实体。每一个进程都有它自己的地址空间；进程是一个“<strong>执行中的程序</strong>”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行之），它才能成为一个活动的实体，我们称其为进程。</p><p><strong>线程</strong>：（thread）操作系统能够进行运算调度的<strong>最小单位</strong>。它被包含在进程之中，是进程中的实际运作单位</p><p><strong>并发</strong>：当操作系统只有一个CPU时，同时运行多个线程，则不可能同时运行，采用将CPU的运行时间划分为若干个时间段，分时执行，但由于线程之间切换过快，给人造成同时运行的假象</p><p><strong>并行</strong>：当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。</p><p><strong>采用多线程的原因</strong>：</p><ul><li><p>程序响应更快；</p></li><li><p>程序设计在某些情况下更简单；</p></li><li><p>资源利用率更好 （在采用单线程的过程中，假如出现了线程阻塞，程序将会终止；采用多线程可避免这种情况）</p></li></ul><h2 id="多线程同步安全问题">1.2多线程同步安全问题</h2><h3 id="问题1：采用两个线程累计40次，计划每个线程累计20">1.2.1问题1：采用两个线程累计40次，计划每个线程累计20</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentProblem</span>  <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CurrentProblem cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentProblem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread th1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread th2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            th1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            th2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 演示线程安全，必要的线程休眠是必要的</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210807171429449-1628327671461.png" alt="image-20210807171429449"></p><p><strong>并非想象的40！</strong></p><p>####原因：<strong>这是由于线程共享进程中的资源造成的</strong></p><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210807173246380-1628328768991.png" alt="image-20210807173246380"></p><h3 id="并发安全问题2">1.2.2并发安全问题2</h3><blockquote><p>需求描述利用一个线程往容器中添加100次线程名字，考虑并发问题</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>safeproblem<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CopyOnWriteArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**利用一个线程往容器中添加100次线程名字，考虑并发问题 * @author DevilStory * @version 0.0.1 * @Date 2021/8/11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListSafe</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        采用LinkedList添加元素效率更高，但线程不安全，可用Vector保证同步或者采用并发容器</span><span class="token comment" spellcheck="true">//         CopyOnWriteArrayList</span>        CopyOnWriteArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>                        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        采用同步块后仍存在显示非100元素，可能主线程调用打印语句时，list仍然没有添加完100个元素</span><span class="token comment" spellcheck="true">//        即使采用并发容器，仍然存在打印不正确，必要的延时打印是必须的</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812103203753-1628735525025.png" alt="image-20210812103203753"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//采用不安全的LinkedList，需加入synchronized块</span>        LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>            list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        采用同步块后仍存在显示非100元素，可能主线程调用打印语句时，list仍然没有添加完100个元素</span><span class="token comment" spellcheck="true">//        即使采用并发容器，仍然存在打印不正确，必要的延时打印是必须的</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812103051101-1628735453334.png" alt="image-20210812103051101"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        采用线程安全的Vector</span>        Vector<span class="token operator">&lt;</span>String<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>                    list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        采用同步块后仍存在显示非100元素，可能主线程调用打印语句时，list仍然没有添加完100个元素</span><span class="token comment" spellcheck="true">//        即使采用并发容器，仍然存在打印不正确，必要的延时打印是必须的</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list3<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812102841636-1628735323729.png" alt="image-20210812102841636"></p><p><strong>更多并发问题见另一篇文档“简单并发控制”</strong></p><h2 id="进程，主线程，子线程关系、">1.3进程，主线程，子线程关系、</h2><ol><li>进程中包含线程</li><li>各个线程之间可能相互独立</li><li>main线程结束，其他线程不受影响依旧运行</li></ol><h2 id="线程的几种状态">1.4线程的几种状态</h2><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.png" alt="线程状态"></p><h3 id="终止态（TERMINATED）">1.4.1终止态（TERMINATED）</h3><h4 id="线程正常结束">1.4.1.1线程正常结束</h4><h4 id="通过外部标志位控制线程结束">1.4.1.2通过外部标志位控制线程结束</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>thread_state<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>testng<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> thread_<span class="token punctuation">.</span>ThreadFactory_<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>LinkedBlockingDeque<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/11 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Terminate_</span> <span class="token punctuation">{</span> <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     ThreadFactory_ fac<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadFactory_</span><span class="token punctuation">(</span><span class="token string">"循环"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ThreadPoolExecutor poolExecutor <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>                     <span class="token number">2</span><span class="token punctuation">,</span>                     2L<span class="token punctuation">,</span>                     TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                     <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     fac<span class="token punctuation">)</span><span class="token punctuation">;</span>     threadTask task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">threadTask</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getCirTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         task<span class="token punctuation">.</span><span class="token function">setTerminateFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     poolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//poolExecutor.shutdown();</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//线程任务类   </span><span class="token keyword">class</span> <span class="token class-name">threadTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span> <span class="token keyword">private</span> <span class="token keyword">boolean</span> terminateFlag<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">int</span> cirTimes<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTerminateFlag</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> terminateFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>terminateFlag <span class="token operator">=</span> terminateFlag<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCirTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> cirTimes<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token function">threadTask</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> terminateFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>terminateFlag <span class="token operator">=</span> terminateFlag<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>terminateFlag<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         cirTimes<span class="token operator">=</span>i<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//以terminateFlag控制线程的结束与否？</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>terminateFlag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程终止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   <strong>ThreadFactory_（工厂类）</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadFactory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 线程工厂 * @author DevilStory * @version 0.0.1 * @Date 2021/8/11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadFactory_</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//默认的工厂名</span> <span class="token keyword">private</span>  String dafaultFactoryName<span class="token operator">=</span><span class="token string">"MYFACTORY"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ArrayList存放线程</span> <span class="token keyword">private</span> <span class="token keyword">final</span> ArrayList <span class="token operator">&lt;</span><span class="token operator">?</span><span class="token keyword">super</span> Thread<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造方法</span> <span class="token keyword">public</span> <span class="token function">ThreadFactory_</span><span class="token punctuation">(</span>String dafaultFactoryName<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>dafaultFactoryName <span class="token operator">=</span> dafaultFactoryName<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 重写ThreadFactory的newThread方法构造线程  * @param r Runable对象  * @return 返回一个线程对象  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Thread <span class="token function">newThread</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//以工厂名字+存放线程的集合大小构成线程名</span>     Thread aTh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> dafaultFactoryName<span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>aTh<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> aTh<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="通过interruput方法">1.4.1.3通过interruput方法</h4><p>   当线程处于阻塞态时，调用interruput方法将会使得线程抛出InterruptException，如果此时线程处于中断状态，将清除该状态，</p><p>####通过关闭线程池</p><p>   Excutors类中的shutdown（）和shutdownnow（）方法</p><table><thead><tr><th></th><th>shutdown（）</th><th>shutdownnow（）</th><th>interruput（）</th><th>isinterruput（）</th></tr></thead><tbody><tr><td>功能</td><td>中断线程池</td><td>中断线程池</td><td>中断线程</td><td>判断线程是否为中断</td></tr><tr><td>何时中断</td><td>待线程结束</td><td>立即</td><td>立即</td><td>##</td></tr><tr><td>线程创建方式</td><td>线程池</td><td>线程池</td><td>任何线程创建方法</td><td>##</td></tr><tr><td>线程启动方式</td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>可选择关闭线程池或者关闭单线程两种方法中断线程</strong></p><h3 id="new态（NEW）">1.4.2new态（NEW）</h3><ul><li>由线程线程的创建开始</li></ul><h3 id="可运行态（RUNNABLE）">1.4.3可运行态（RUNNABLE）</h3><p>####就绪</p><ul><li>由start（）进入</li><li>yield（）</li><li>sleep（）</li></ul><p>####运行时</p><ul><li>由CPU调度</li></ul><h4 id="阻塞态">1.4.3.1阻塞态</h4><h5 id="等待（WAITING）">1.4.3.1.1等待（WAITING）</h5><h5 id="计时等待（TIME-WAITING）">1.4.3.1.2计时等待（TIME WAITING）</h5><h5 id="阻塞（BLOCKED）">1.4.3.1.3阻塞（BLOCKED）</h5><h2 id="如何开启线程">1.5如何开启线程</h2><h3 id="Runable接口和thread类">1.5.1Runable接口和thread类</h3><h4 id="实现Runable接口，多个线程共享一个资源，较继承Thread类，可以避免单继承的限制">1.5.1.1实现Runable接口，多个线程共享一个资源，较继承Thread类，可以避免单继承的限制</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token comment" spellcheck="true">//为函数式接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/**  * When an object implementing interface &lt;code>Runnable&lt;/code> is used  * to create a thread, starting the thread causes the object's  * &lt;code>run&lt;/code> method to be called in that separately executing  * thread.  * &lt;p>  * The general contract of the method &lt;code>run&lt;/code> is that it may  * take any action whatsoever.  *  * @see     java.lang.Thread#run()  */</span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="继承Thread类">1.5.1.2继承Thread类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>Runabel_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">lam_Runable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//        lam_Runable lam = new lam_Runable();</span><span class="token comment" spellcheck="true">//        thread2 thread2 = new thread2();</span><span class="token comment" spellcheck="true">//        Thread th1 = new Thread(lam);</span><span class="token comment" spellcheck="true">//        Thread th2 = new Thread(thread2);</span><span class="token comment" spellcheck="true">//        th1.start();</span><span class="token comment" spellcheck="true">//        th2.start();</span><span class="token comment" spellcheck="true">//        (new Thread((new lam_Runable()))).start();</span><span class="token comment" spellcheck="true">//        (new Thread((new thread2()))).start();</span>     Thread once <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一次性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     once<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//lambda</span>     Thread newOnce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一次性"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     newOnce<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">thread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span> <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     count<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="通过线程池创建线程">1.5.2通过线程池创建线程</h3><h4 id="通过Excutors类创建">1.5.2.1通过Excutors类创建</h4><h5 id="第一种方法">1.5.2.1.1第一种方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><blockquote><p>可缓存的线程池，可以根据需要创建线程，故可以提高需要异步且短期生命周期的程序的效率，当池中有超过60秒的线程未被调用，该线程将被终止并从池中删除 <strong>（该特性无法演示，线程是否调用由CPU决定）</strong> ,当需要创建其他存在时长的线程，需要<code>ThreadPoolExecutor</code></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewCacheThreadPool_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构建线程池        ExecutorService cache = Executors.newCachedThreadPool();        //lambda实现线程方法        for (int i = 0; i &lt; 4; i++) {            cache.execute(()->{                try {  TimeUnit.SECONDS.sleep(60);                    System.out.println("延时1成功");                } catch (InterruptedException e) {                    e.printStackTrace();                }                System.out.println(Thread.currentThread().getName()+"  "+"执行成功");            });   }        //获取池中线程数        NewCacheThreadPool_.getCount(cache);        //另一个线程方法        cache.execute(()->{            System.out.println("任务2执行");        });        NewCacheThreadPool_.getCount(cache);    }    </span><span class="token comment" spellcheck="true">/**     * 获取池中的静态方法     * @param cache     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getCount</span><span class="token punctuation">(</span>ExecutorService cache<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> Count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">)</span>cache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActiveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"池中的线程数"</span><span class="token operator">+</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210810140935358-1628575778506.png" alt="image-20210810140935358"></p><p>   #####<strong>第二方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span></code></pre><blockquote><p>固定线程数的线程池</p><p>在共享的无界队列中运行线程，当初始化的所有线程都在运行，此时若需要新的线程，则该任务将在无界队列中等待，直到当前运行的线程存在空缺</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 固定线程数的池 * @author DevilStory * @version 0.0.1 * @Date 2021/8/10 */</span><span class="token annotation punctuation">@Testpublic</span> <span class="token keyword">class</span> <span class="token class-name">newFixedThreadPool_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fixTh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构建线程池        ExecutorService fixedThread= Executors.newFixedThreadPool(4);        //开启5个任务，任然是池中的4个线程执行        for (int i = 0; i &lt; 5; i++) {        fixedThread.execute(() -> {                System.out.println("当前线程："+Thread.currentThread().getName());            }        );}        fixedThread.shutdown();    }}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210810141210532-1628575940327.png" alt="image-20210810141210532"></p><p>   #####<strong>第三方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//还有其他的单线程池重载方法</span></code></pre><blockquote><p>控制核心的线程数，可以定期或者延时的执行线程</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Testpublic</span> <span class="token keyword">class</span> <span class="token class-name">newScheduledThreadPool_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构建线程池        ScheduledExecutorService scheThread= Executors.newScheduledThreadPool(3);        System.out.println(new Date());//        调用schedule方法定时1s再执行线程任务        scheThread.schedule(()->{            System.out.println("任务被执行"+new Date());            try {                TimeUnit.SECONDS.sleep(1);            } catch (InterruptedException e) {            }        }, 1, TimeUnit.SECONDS);    }}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210810153552970-1628580954404.png" alt="image-20210810153552970"></p><p>   #####<strong>第四方法</strong></p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>单线程池，虽然为单线程，但提供了工作队列，生命周期管理，工作线程维护等功能。</p></blockquote><p>   #####<strong>第五方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>采用多个队列存放线程任务，不保证执行顺序</p></blockquote><h4 id="通过ThreadPoolExecutor创建（重点）">1.5.2.2通过ThreadPoolExecutor创建（重点）</h4><p>线程池不允许使用 Executors 去创建，而是<strong>通过 ThreadPoolExecutor 的方式</strong>，这样的处理方式让写的同学更加明确线程池的运行规则，<strong>规避资源耗尽</strong>的风险。<br>说明：Executors 返回的线程池对象的弊端如下：<br>1）FixedThreadPool SingleThreadPool:允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM( **内存溢出)**。<br>2）CachedThreadPool 和 ScheduledThreadPool:允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p><h5 id="构造方法简要说明">1.5.2.2.1构造方法简要说明</h5><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">)</span>          <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//核心线程数，小于，                              int maximumPoolSize,//最大线程数                              long keepAliveTime,                              TimeUnit unit,                              BlockingQueue&lt;Runnable> workQueue,                              ThreadFactory threadFactory,                              RejectedExecutionHandler handler)</span></code></pre><ul><li><p><strong>corePoolSize</strong>：核心线程数；《，则使用池中剩余核心线程运行。大于，则看队列是否满？</p></li><li><p><strong>maximumPoolSize</strong>：最大的并行线程，只有当队列没有剩余位置，且池中运行线程数大于maximumPoolSize，当前任务拒绝，corePoolSize和maximumPoolSize应该在构造线程池时初始化，但也可在后续使用setCorePoolSize 和setMaximumPoolSize方法重新设置</p></li><li><p><strong>keepAliveTime</strong>：最大线程数可以存活的时间，当线程中没有任务执行时，最大线程就会销毁一部分，最终保持核心线程数量的线程</p></li><li><p><strong>unit：</strong>单位</p></li><li><p><strong>workQueue</strong>：一个阻塞队列，用来存储线程池等待执行的任务，均为线程安全|<br>ArrayBlockingQueue<br>LinkedBlockingQueue<br>SynchronousQueu</p></li><li><p><strong>threadFactory</strong>：线程工厂，主要用来创建线程，默认为正常优先级、非守护线程</p></li><li><p><strong>handler</strong>：拒绝策略，拒绝处理任务时的策略，（4种）<br>DiscardOldestPolic<br>DiscardPolic<br>CallerRunsPolic<br>AbortPolicy</p></li></ul><p>#####线程池普通的执行流程</p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/ThreadPoolExcutor%E6%89%A7%E8%A1%8C%E6%AD%A5%E9%AA%A4.png" alt="ThreadPoolExcutor执行步骤" style="zoom:80%;"><h3 id="实现-Callable-接口，并结合-Future-实现">1.5.3实现 Callable 接口，并结合 Future 实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>callabe_<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cal</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        cal thr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>thr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启主线程，为响应得到名为线程0的返回值，此时主线程阻塞，等待线程0的返回值        new Thread(futureTask,"线程0").start();        Object o = futureTask.get();        System.out.println(Thread.currentThread().getName()+"返回值为："+o);    }    @Override    public Integer call() throws Exception {                System.out.println("目前线程为："+Thread.currentThread().getName()+"   " +                ""+"Callable响应返回1");        return 1;    }}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210808110618898-1628391980474.png" alt="image-20210808110618898"></p>]]></content>
      
      
      <categories>
          
          <category> 并发 java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发基础 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单并发控制</title>
      <link href="/posts/ef40.html"/>
      <url>/posts/ef40.html</url>
      
        <content type="html"><![CDATA[<p>#简单并发控制</p><h2 id="并发问题">0.1并发问题</h2><p>当同一个对象被多个线程同时操作时，产生数据安全问题</p><p>##并发问题根源</p><h3 id="原子性">0.1.1原子性</h3><ul><li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；// 导致 <code>原子性</code>问题</li></ul><h3 id="可见性">0.1.2可见性</h3><ul><li>CPU 增加了缓存，以均衡与内存的速度差异；// 导致 <code>可见性</code>问题</li></ul><h3 id="有序性">0.1.3有序性</h3><ul><li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。// 导致 <code>有序性</code>问题</li></ul><h2 id="解决方法">0.2解决方法</h2><p>###互斥同步</p><ul><li>采用加锁（synchronized 和 ReentrantLock）</li></ul><ol><li>加锁机制：使对象拥有锁，独占资源，只有等待对象释放锁后，其他线程才可以享受该资源</li><li>加锁存在的问题：<ul><li>一个线程加锁会导致其他需要该锁的线程被挂起</li><li>加锁和释放锁导致的上下文切换和调度延时，引起性能问题</li><li>高优先级的线程被低优先级的线程的占有锁导致优先级倒置，引起性能问题。<a href="#%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7">点击跳转线程优先级</a></li></ul></li></ol><h3 id="非阻塞同步-需要后期补充">0.2.1非阻塞同步(需要后期补充)</h3><ul><li>CAS</li><li>AtomicInteger</li><li>ABA<h3 id="一些不需要同步的线程-需要后期补充">0.2.2一些不需要同步的线程(需要后期补充)</h3></li><li>栈封闭</li><li>线程本地存储(Thread Local Storage)</li><li>可重入代码(Reentrant Code)</li></ul><h2 id="同步方法和同步代码块">0.3同步方法和同步代码块</h2><blockquote><p>采用添加关键字synchronized</p></blockquote><h3 id="同步方法">0.3.1同步方法</h3><ul><li>对成员方法，即对this对象加锁，方法中用到的对象都加锁</li><li>静态方法，对该方法中使用到的反射对象加锁</li></ul><h3 id="同步块">0.3.2同步块</h3><pre class=" language-java"><code class="language-java">  同步块<span class="token function">synchronzied</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span></code></pre><p><strong>java中常见的代码块：</strong></p><ul><li><p>局部块：方法体中的代码块</p></li><li><p>成员块：方法体外的代码块</p></li><li><p>静态块：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>同步块</p></li></ul><h4 id="存在问题">0.3.2.1存在问题</h4><ol><li>对一个大的方法添加synchronized，导致性能下降，大多数情况采用同步块</li><li>同步块使用不当，造成同步问题仍然存在、、</li><li>同步块锁住的为内存地址不变的对象？？</li><li>应考虑高并发，高性能，高实现，即安全性能均需考虑</li></ol><h4 id="案列">0.3.2.2案列</h4><blockquote><p>考虑多线程同步问题，用同步方法和同步块两种方式解决问题</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>safeproblem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**采用两台机器抢票，票共10张 * 考虑多线程同步问题，用同步方法和同步块两种方式解决问题 * @author DevilStory * @version 0.0.1 * @Date 2021/8/11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Ticket tickets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//tickets对象同时被2个线程操作买票，会产生数据的安全问题</span>        Thread thread01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>tickets<span class="token punctuation">,</span> <span class="token string">"一号机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>tickets<span class="token punctuation">,</span> <span class="token string">"二号机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 售票处 */</span><span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//同步成员方法（test），即this对象加锁，方法操作的对象加锁，本例中为sum和flag</span>    <span class="token keyword">private</span> <span class="token comment" spellcheck="true">/*synchronized*/</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        考虑性能问题，当票数为0时，不需要进入同步块</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        同步块</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812111735134-1628738258035.png" alt="image-20210812111735134"></p><p>当不采用同步</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//同步成员方法（test），即this对象加锁，方法操作的对象加锁，本例中为sum和flag</span>    <span class="token keyword">private</span> <span class="token comment" spellcheck="true">/*synchronized*/</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        考虑性能问题，当票数为0时，不需要进入同步块</span><span class="token comment" spellcheck="true">//        if(sum==0){</span><span class="token comment" spellcheck="true">//            return;</span><span class="token comment" spellcheck="true">//        }</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        同步块</span><span class="token comment" spellcheck="true">//        synchronized (this) {</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        }</span>    <span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812113835561-1628739517088.png" alt="image-20210812113835561"></p><h2 id="线程优先级">0.4线程优先级</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_PRIORITY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NORM_PRIORITY <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_PRIORITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Priority_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        printMes printMes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">printMes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>printMes<span class="token punctuation">,</span><span class="token string">"线程0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>printMes<span class="token punctuation">,</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>printMes<span class="token punctuation">,</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread0<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">printMes</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812115950199-1628740791674.png" alt="image-20210812115950199"></p><p><strong>结果并非一定按照设置的优先级执行</strong></p><p>原因：<strong>线程的优先级设置可以理解为线程抢占CPU时间片的概率，虽然概率比较大，但是它不一定就是按照优先级的顺序去抢占CPU时间片的，具体的执行顺序还是要根据谁先抢到了CPU的时间片，谁就先来执行。</strong></p><h2 id="线程中的常用方法">0.5线程中的常用方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>###yield（）方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>threadmethod_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**线程的常见方法演示 * sleep，start，join，yield，wait， * @author DevilStory * @version 0.0.1 * @Date 2021/8/12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>          NormalMethod<span class="token punctuation">.</span><span class="token function">yield_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * yield()，a线程调用，则a礼让其他线程，a进入Ready状态，不释放锁，和其他线程等待CPU调度     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">yield_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//礼让main线程</span>                Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yield"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812160338483-1628755420794.png" alt="image-20210812160338483"></p><p>###sleep（）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        NormalMethod<span class="token punctuation">.</span><span class="token function">sleep_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * sleep(sleeptime),线程a调用此方法，a进入TIMED WAITING，不释放锁，当其他线程需要a线程的锁，需等待sleeptime结束。     * 此后a进入RUNABLE的就绪状态     * @throws InterruptedException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span> Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812161114838-1628755878310.png" alt="image-20210812161114838"></p><p>###join（）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>       NormalMethod<span class="token punctuation">.</span><span class="token function">join_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * join(timeout)，join()，分别进入Timed Waiting，Waiting，a线程中调用b线程的join方法，     * 则a需等待b执行结束才会执行，b会让出锁，     *join_(),在父线程中插队子线程，等待子线程执行完毕，父线程才会执行     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">join_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">par</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"父线程"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 父线程 */</span><span class="token keyword">class</span> <span class="token class-name">par</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建字线程</span>        Thread chiTh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">chi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"子线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动子线程</span>        chiTh<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        在父线程中创建子线程，并让子线程插队</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            chiTh<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        父线程任务</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t执行"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 子线程 */</span><span class="token keyword">class</span> <span class="token class-name">chi</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//子线程任务</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//子线程加入延时</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t执行"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812161407319-1628756049479.png" alt="image-20210812161407319"></p><h2 id="参考文档">0.6参考文档</h2><p><a href="https://www.pdai.tech/md/java/thread/java-thread-x-theorty.html#%e5%b8%a6%e7%9d%80bat%e5%a4%a7%e5%8e%82%e7%9a%84%e9%9d%a2%e8%af%95%e9%97%ae%e9%a2%98%e5%8e%bb%e7%90%86%e8%a7%a3" rel="external nofollow noreferrer">点击跳转线程</a></p><p><a href="https://www.pdai.tech/md/java/thread/java-thread-x-theorty.html#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95" rel="external nofollow noreferrer">点击跳转多线程并发安全控制方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发问题 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> 线程建立 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
