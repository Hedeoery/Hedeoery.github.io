<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" rel="external nofollow noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noreferrer">GitHub</a>.</p><h2 id="Quick-Start">0.1Quick Start</h2><h3 id="Create-a-new-post">0.1.1Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noreferrer">Writing</a></p><h3 id="Run-server">0.1.2Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noreferrer">Server</a></p><h3 id="Generate-static-files">0.1.3Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noreferrer">Generating</a></p><h3 id="Deploy-to-remote-sites">0.1.4Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" rel="external nofollow noreferrer">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>并发基础</title>
      <link href="/posts/ef40.html"/>
      <url>/posts/ef40.html</url>
      
        <content type="html"><![CDATA[<h1 id="并发">1并发</h1><h2 id="基础概念">1.1基础概念</h2><p><strong>进程</strong>：进程是一个实体。每一个进程都有它自己的地址空间；进程是一个“<strong>执行中的程序</strong>”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行之），它才能成为一个活动的实体，我们称其为进程。</p><p><strong>线程</strong>：（thread）操作系统能够进行运算调度的<strong>最小单位</strong>。它被包含在进程之中，是进程中的实际运作单位</p><p><strong>并发</strong>：当操作系统只有一个CPU时，同时运行多个线程，则不可能同时运行，采用将CPU的运行时间划分为若干个时间段，分时执行，但由于线程之间切换过快，给人造成同时运行的假象</p><p><strong>并行</strong>：当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。</p><p><strong>采用多线程的原因</strong>：</p><ul><li><p>程序响应更快；</p></li><li><p>程序设计在某些情况下更简单；</p></li><li><p>资源利用率更好 （在采用单线程的过程中，假如出现了线程阻塞，程序将会终止；采用多线程可避免这种情况）</p></li></ul><h2 id="多线程同步安全问题">1.2多线程同步安全问题</h2><h3 id="问题1：采用两个线程累计40次，计划每个线程累计20">1.2.1问题1：采用两个线程累计40次，计划每个线程累计20</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentProblem</span>  <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CurrentProblem cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentProblem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread th1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread th2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            th1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            th2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 演示线程安全，必要的线程休眠是必要的</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210807171429449-1628327671461.png" alt="image-20210807171429449"></p><p><strong>并非想象的40！</strong></p><p>####原因：<strong>这是由于线程共享进程中的资源造成的</strong></p><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210807173246380-1628328768991.png" alt="image-20210807173246380"></p><h3 id="并发安全问题2">1.2.2并发安全问题2</h3><blockquote><p>需求描述利用一个线程往容器中添加100次线程名字，考虑并发问题</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>safeproblem<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CopyOnWriteArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**利用一个线程往容器中添加100次线程名字，考虑并发问题 * @author DevilStory * @version 0.0.1 * @Date 2021/8/11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListSafe</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        采用LinkedList添加元素效率更高，但线程不安全，可用Vector保证同步或者采用并发容器</span><span class="token comment" spellcheck="true">//         CopyOnWriteArrayList</span>        CopyOnWriteArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>                        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        采用同步块后仍存在显示非100元素，可能主线程调用打印语句时，list仍然没有添加完100个元素</span><span class="token comment" spellcheck="true">//        即使采用并发容器，仍然存在打印不正确，必要的延时打印是必须的</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812103203753-1628735525025.png" alt="image-20210812103203753"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//采用不安全的LinkedList，需加入synchronized块</span>        LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>            list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        采用同步块后仍存在显示非100元素，可能主线程调用打印语句时，list仍然没有添加完100个元素</span><span class="token comment" spellcheck="true">//        即使采用并发容器，仍然存在打印不正确，必要的延时打印是必须的</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812103051101-1628735453334.png" alt="image-20210812103051101"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        采用线程安全的Vector</span>        Vector<span class="token operator">&lt;</span>String<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>                    list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        采用同步块后仍存在显示非100元素，可能主线程调用打印语句时，list仍然没有添加完100个元素</span><span class="token comment" spellcheck="true">//        即使采用并发容器，仍然存在打印不正确，必要的延时打印是必须的</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list3<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812102841636-1628735323729.png" alt="image-20210812102841636"></p><p><strong>更多并发问题见另一篇文档“简单并发控制”</strong></p><h2 id="进程，主线程，子线程关系、">1.3进程，主线程，子线程关系、</h2><ol><li>进程中包含线程</li><li>各个线程之间可能相互独立</li><li>main线程结束，其他线程不受影响依旧运行</li></ol><h2 id="线程的几种状态">1.4线程的几种状态</h2><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.png" alt="线程状态"></p><h3 id="终止态（TERMINATED）">1.4.1终止态（TERMINATED）</h3><h4 id="线程正常结束">1.4.1.1线程正常结束</h4><h4 id="通过外部标志位控制线程结束">1.4.1.2通过外部标志位控制线程结束</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>thread_state<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>testng<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> thread_<span class="token punctuation">.</span>ThreadFactory_<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>LinkedBlockingDeque<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/11 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Terminate_</span> <span class="token punctuation">{</span> <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     ThreadFactory_ fac<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadFactory_</span><span class="token punctuation">(</span><span class="token string">"循环"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ThreadPoolExecutor poolExecutor <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>                     <span class="token number">2</span><span class="token punctuation">,</span>                     2L<span class="token punctuation">,</span>                     TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                     <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     fac<span class="token punctuation">)</span><span class="token punctuation">;</span>     threadTask task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">threadTask</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getCirTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         task<span class="token punctuation">.</span><span class="token function">setTerminateFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     poolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//poolExecutor.shutdown();</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//线程任务类   </span><span class="token keyword">class</span> <span class="token class-name">threadTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span> <span class="token keyword">private</span> <span class="token keyword">boolean</span> terminateFlag<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">int</span> cirTimes<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTerminateFlag</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> terminateFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>terminateFlag <span class="token operator">=</span> terminateFlag<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCirTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> cirTimes<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token function">threadTask</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> terminateFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>terminateFlag <span class="token operator">=</span> terminateFlag<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>terminateFlag<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         cirTimes<span class="token operator">=</span>i<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//以terminateFlag控制线程的结束与否？</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>terminateFlag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程终止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   <strong>ThreadFactory_（工厂类）</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadFactory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 线程工厂 * @author DevilStory * @version 0.0.1 * @Date 2021/8/11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadFactory_</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//默认的工厂名</span> <span class="token keyword">private</span>  String dafaultFactoryName<span class="token operator">=</span><span class="token string">"MYFACTORY"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ArrayList存放线程</span> <span class="token keyword">private</span> <span class="token keyword">final</span> ArrayList <span class="token operator">&lt;</span><span class="token operator">?</span><span class="token keyword">super</span> Thread<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造方法</span> <span class="token keyword">public</span> <span class="token function">ThreadFactory_</span><span class="token punctuation">(</span>String dafaultFactoryName<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>dafaultFactoryName <span class="token operator">=</span> dafaultFactoryName<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 重写ThreadFactory的newThread方法构造线程  * @param r Runable对象  * @return 返回一个线程对象  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Thread <span class="token function">newThread</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//以工厂名字+存放线程的集合大小构成线程名</span>     Thread aTh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> dafaultFactoryName<span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>aTh<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> aTh<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="通过interruput方法">1.4.1.3通过interruput方法</h4><p>   当线程处于阻塞态时，调用interruput方法将会使得线程抛出InterruptException，如果此时线程处于中断状态，将清除该状态，</p><p>####通过关闭线程池</p><p>   Excutors类中的shutdown（）和shutdownnow（）方法</p><table><thead><tr><th></th><th>shutdown（）</th><th>shutdownnow（）</th><th>interruput（）</th><th>isinterruput（）</th></tr></thead><tbody><tr><td>功能</td><td>中断线程池</td><td>中断线程池</td><td>中断线程</td><td>判断线程是否为中断</td></tr><tr><td>何时中断</td><td>待线程结束</td><td>立即</td><td>立即</td><td>##</td></tr><tr><td>线程创建方式</td><td>线程池</td><td>线程池</td><td>任何线程创建方法</td><td>##</td></tr><tr><td>线程启动方式</td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>可选择关闭线程池或者关闭单线程两种方法中断线程</strong></p><h3 id="new态（NEW）">1.4.2new态（NEW）</h3><ul><li>由线程线程的创建开始</li></ul><h3 id="可运行态（RUNNABLE）">1.4.3可运行态（RUNNABLE）</h3><p>####就绪</p><ul><li>由start（）进入</li><li>yield（）</li><li>sleep（）</li></ul><p>####运行时</p><ul><li>由CPU调度</li></ul><h4 id="阻塞态">1.4.3.1阻塞态</h4><h5 id="等待（WAITING）">1.4.3.1.1等待（WAITING）</h5><h5 id="计时等待（TIME-WAITING）">1.4.3.1.2计时等待（TIME WAITING）</h5><h5 id="阻塞（BLOCKED）">1.4.3.1.3阻塞（BLOCKED）</h5><h2 id="如何开启线程">1.5如何开启线程</h2><h3 id="Runable接口和thread类">1.5.1Runable接口和thread类</h3><h4 id="实现Runable接口，多个线程共享一个资源，较继承Thread类，可以避免单继承的限制">1.5.1.1实现Runable接口，多个线程共享一个资源，较继承Thread类，可以避免单继承的限制</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token comment" spellcheck="true">//为函数式接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/**  * When an object implementing interface &lt;code>Runnable&lt;/code> is used  * to create a thread, starting the thread causes the object's  * &lt;code>run&lt;/code> method to be called in that separately executing  * thread.  * &lt;p>  * The general contract of the method &lt;code>run&lt;/code> is that it may  * take any action whatsoever.  *  * @see     java.lang.Thread#run()  */</span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="继承Thread类">1.5.1.2继承Thread类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>Runabel_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">lam_Runable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//        lam_Runable lam = new lam_Runable();</span><span class="token comment" spellcheck="true">//        thread2 thread2 = new thread2();</span><span class="token comment" spellcheck="true">//        Thread th1 = new Thread(lam);</span><span class="token comment" spellcheck="true">//        Thread th2 = new Thread(thread2);</span><span class="token comment" spellcheck="true">//        th1.start();</span><span class="token comment" spellcheck="true">//        th2.start();</span><span class="token comment" spellcheck="true">//        (new Thread((new lam_Runable()))).start();</span><span class="token comment" spellcheck="true">//        (new Thread((new thread2()))).start();</span>     Thread once <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一次性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     once<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//lambda</span>     Thread newOnce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一次性"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     newOnce<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">thread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span> <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     count<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="通过线程池创建线程">1.5.2通过线程池创建线程</h3><h4 id="通过Excutors类创建">1.5.2.1通过Excutors类创建</h4><h5 id="第一种方法">1.5.2.1.1第一种方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><blockquote><p>可缓存的线程池，可以根据需要创建线程，故可以提高需要异步且短期生命周期的程序的效率，当池中有超过60秒的线程未被调用，该线程将被终止并从池中删除 <strong>（该特性无法演示，线程是否调用由CPU决定）</strong> ,当需要创建其他存在时长的线程，需要<code>ThreadPoolExecutor</code></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewCacheThreadPool_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构建线程池        ExecutorService cache = Executors.newCachedThreadPool();        //lambda实现线程方法        for (int i = 0; i &lt; 4; i++) {            cache.execute(()->{                try {  TimeUnit.SECONDS.sleep(60);                    System.out.println("延时1成功");                } catch (InterruptedException e) {                    e.printStackTrace();                }                System.out.println(Thread.currentThread().getName()+"  "+"执行成功");            });   }        //获取池中线程数        NewCacheThreadPool_.getCount(cache);        //另一个线程方法        cache.execute(()->{            System.out.println("任务2执行");        });        NewCacheThreadPool_.getCount(cache);    }    </span><span class="token comment" spellcheck="true">/**     * 获取池中的静态方法     * @param cache     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getCount</span><span class="token punctuation">(</span>ExecutorService cache<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> Count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">)</span>cache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActiveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"池中的线程数"</span><span class="token operator">+</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210810140935358-1628575778506.png" alt="image-20210810140935358"></p><p>   #####<strong>第二方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span></code></pre><blockquote><p>固定线程数的线程池</p><p>在共享的无界队列中运行线程，当初始化的所有线程都在运行，此时若需要新的线程，则该任务将在无界队列中等待，直到当前运行的线程存在空缺</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 固定线程数的池 * @author DevilStory * @version 0.0.1 * @Date 2021/8/10 */</span><span class="token annotation punctuation">@Testpublic</span> <span class="token keyword">class</span> <span class="token class-name">newFixedThreadPool_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fixTh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构建线程池        ExecutorService fixedThread= Executors.newFixedThreadPool(4);        //开启5个任务，任然是池中的4个线程执行        for (int i = 0; i &lt; 5; i++) {        fixedThread.execute(() -> {                System.out.println("当前线程："+Thread.currentThread().getName());            }        );}        fixedThread.shutdown();    }}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210810141210532-1628575940327.png" alt="image-20210810141210532"></p><p>   #####<strong>第三方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//还有其他的单线程池重载方法</span></code></pre><blockquote><p>控制核心的线程数，可以定期或者延时的执行线程</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Testpublic</span> <span class="token keyword">class</span> <span class="token class-name">newScheduledThreadPool_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构建线程池        ScheduledExecutorService scheThread= Executors.newScheduledThreadPool(3);        System.out.println(new Date());//        调用schedule方法定时1s再执行线程任务        scheThread.schedule(()->{            System.out.println("任务被执行"+new Date());            try {                TimeUnit.SECONDS.sleep(1);            } catch (InterruptedException e) {            }        }, 1, TimeUnit.SECONDS);    }}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210810153552970-1628580954404.png" alt="image-20210810153552970"></p><p>   #####<strong>第四方法</strong></p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>单线程池，虽然为单线程，但提供了工作队列，生命周期管理，工作线程维护等功能。</p></blockquote><p>   #####<strong>第五方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>采用多个队列存放线程任务，不保证执行顺序</p></blockquote><h4 id="通过ThreadPoolExecutor创建（重点）">1.5.2.2通过ThreadPoolExecutor创建（重点）</h4><p>线程池不允许使用 Executors 去创建，而是<strong>通过 ThreadPoolExecutor 的方式</strong>，这样的处理方式让写的同学更加明确线程池的运行规则，<strong>规避资源耗尽</strong>的风险。<br>说明：Executors 返回的线程池对象的弊端如下：<br>1）FixedThreadPool SingleThreadPool:允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM( **内存溢出)**。<br>2）CachedThreadPool 和 ScheduledThreadPool:允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p><h5 id="构造方法简要说明">1.5.2.2.1构造方法简要说明</h5><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">)</span>          <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//核心线程数，小于，                              int maximumPoolSize,//最大线程数                              long keepAliveTime,                              TimeUnit unit,                              BlockingQueue&lt;Runnable> workQueue,                              ThreadFactory threadFactory,                              RejectedExecutionHandler handler)</span></code></pre><ul><li><p><strong>corePoolSize</strong>：核心线程数；《，则使用池中剩余核心线程运行。大于，则看队列是否满？</p></li><li><p><strong>maximumPoolSize</strong>：最大的并行线程，只有当队列没有剩余位置，且池中运行线程数大于maximumPoolSize，当前任务拒绝，corePoolSize和maximumPoolSize应该在构造线程池时初始化，但也可在后续使用setCorePoolSize 和setMaximumPoolSize方法重新设置</p></li><li><p><strong>keepAliveTime</strong>：最大线程数可以存活的时间，当线程中没有任务执行时，最大线程就会销毁一部分，最终保持核心线程数量的线程</p></li><li><p><strong>unit：</strong>单位</p></li><li><p><strong>workQueue</strong>：一个阻塞队列，用来存储线程池等待执行的任务，均为线程安全|<br>ArrayBlockingQueue<br>LinkedBlockingQueue<br>SynchronousQueu</p></li><li><p><strong>threadFactory</strong>：线程工厂，主要用来创建线程，默认为正常优先级、非守护线程</p></li><li><p><strong>handler</strong>：拒绝策略，拒绝处理任务时的策略，（4种）<br>DiscardOldestPolic<br>DiscardPolic<br>CallerRunsPolic<br>AbortPolicy</p></li></ul><p>#####线程池普通的执行流程</p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/ThreadPoolExcutor%E6%89%A7%E8%A1%8C%E6%AD%A5%E9%AA%A4.png" alt="ThreadPoolExcutor执行步骤" style="zoom:80%;"><h3 id="实现-Callable-接口，并结合-Future-实现">1.5.3实现 Callable 接口，并结合 Future 实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>callabe_<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author DevilStory * @version 0.0.1 * @Date 2021/8/8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cal</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        cal thr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>thr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启主线程，为响应得到名为线程0的返回值，此时主线程阻塞，等待线程0的返回值        new Thread(futureTask,"线程0").start();        Object o = futureTask.get();        System.out.println(Thread.currentThread().getName()+"返回值为："+o);    }    @Override    public Integer call() throws Exception {                System.out.println("目前线程为："+Thread.currentThread().getName()+"   " +                ""+"Callable响应返回1");        return 1;    }}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210808110618898-1628391980474.png" alt="image-20210808110618898"></p>]]></content>
      
      
      <categories>
          
          <category> 并发 java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发基础 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单并发控制</title>
      <link href="/posts/ef40.html"/>
      <url>/posts/ef40.html</url>
      
        <content type="html"><![CDATA[<p>#简单并发控制</p><h2 id="并发问题">0.1并发问题</h2><p>当同一个对象被多个线程同时操作时，产生数据安全问题</p><p>##并发问题根源</p><h3 id="原子性">0.1.1原子性</h3><ul><li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；// 导致 <code>原子性</code>问题</li></ul><h3 id="可见性">0.1.2可见性</h3><ul><li>CPU 增加了缓存，以均衡与内存的速度差异；// 导致 <code>可见性</code>问题</li></ul><h3 id="有序性">0.1.3有序性</h3><ul><li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。// 导致 <code>有序性</code>问题</li></ul><h2 id="解决方法">0.2解决方法</h2><p>###互斥同步</p><ul><li>采用加锁（synchronized 和 ReentrantLock）</li></ul><ol><li>加锁机制：使对象拥有锁，独占资源，只有等待对象释放锁后，其他线程才可以享受该资源</li><li>加锁存在的问题：<ul><li>一个线程加锁会导致其他需要该锁的线程被挂起</li><li>加锁和释放锁导致的上下文切换和调度延时，引起性能问题</li><li>高优先级的线程被低优先级的线程的占有锁导致优先级倒置，引起性能问题。<a href="#%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7">点击跳转线程优先级</a></li></ul></li></ol><h3 id="非阻塞同步-需要后期补充">0.2.1非阻塞同步(需要后期补充)</h3><ul><li>CAS</li><li>AtomicInteger</li><li>ABA<h3 id="一些不需要同步的线程-需要后期补充">0.2.2一些不需要同步的线程(需要后期补充)</h3></li><li>栈封闭</li><li>线程本地存储(Thread Local Storage)</li><li>可重入代码(Reentrant Code)</li></ul><h2 id="同步方法和同步代码块">0.3同步方法和同步代码块</h2><blockquote><p>采用添加关键字synchronized</p></blockquote><h3 id="同步方法">0.3.1同步方法</h3><ul><li>对成员方法，即对this对象加锁，方法中用到的对象都加锁</li><li>静态方法，对该方法中使用到的反射对象加锁</li></ul><h3 id="同步块">0.3.2同步块</h3><pre class=" language-java"><code class="language-java">  同步块<span class="token function">synchronzied</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span></code></pre><p><strong>java中常见的代码块：</strong></p><ul><li><p>局部块：方法体中的代码块</p></li><li><p>成员块：方法体外的代码块</p></li><li><p>静态块：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>同步块</p></li></ul><h4 id="存在问题">0.3.2.1存在问题</h4><ol><li>对一个大的方法添加synchronized，导致性能下降，大多数情况采用同步块</li><li>同步块使用不当，造成同步问题仍然存在、、</li><li>同步块锁住的为内存地址不变的对象？？</li><li>应考虑高并发，高性能，高实现，即安全性能均需考虑</li></ol><h4 id="案列">0.3.2.2案列</h4><blockquote><p>考虑多线程同步问题，用同步方法和同步块两种方式解决问题</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>safeproblem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**采用两台机器抢票，票共10张 * 考虑多线程同步问题，用同步方法和同步块两种方式解决问题 * @author DevilStory * @version 0.0.1 * @Date 2021/8/11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Ticket tickets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//tickets对象同时被2个线程操作买票，会产生数据的安全问题</span>        Thread thread01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>tickets<span class="token punctuation">,</span> <span class="token string">"一号机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>tickets<span class="token punctuation">,</span> <span class="token string">"二号机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 售票处 */</span><span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//同步成员方法（test），即this对象加锁，方法操作的对象加锁，本例中为sum和flag</span>    <span class="token keyword">private</span> <span class="token comment" spellcheck="true">/*synchronized*/</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        考虑性能问题，当票数为0时，不需要进入同步块</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        同步块</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812111735134-1628738258035.png" alt="image-20210812111735134"></p><p>当不采用同步</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//同步成员方法（test），即this对象加锁，方法操作的对象加锁，本例中为sum和flag</span>    <span class="token keyword">private</span> <span class="token comment" spellcheck="true">/*synchronized*/</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        考虑性能问题，当票数为0时，不需要进入同步块</span><span class="token comment" spellcheck="true">//        if(sum==0){</span><span class="token comment" spellcheck="true">//            return;</span><span class="token comment" spellcheck="true">//        }</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        同步块</span><span class="token comment" spellcheck="true">//        synchronized (this) {</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        }</span>    <span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812113835561-1628739517088.png" alt="image-20210812113835561"></p><h2 id="线程优先级">0.4线程优先级</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_PRIORITY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NORM_PRIORITY <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_PRIORITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Priority_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        printMes printMes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">printMes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>printMes<span class="token punctuation">,</span><span class="token string">"线程0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>printMes<span class="token punctuation">,</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>printMes<span class="token punctuation">,</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread0<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">printMes</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812115950199-1628740791674.png" alt="image-20210812115950199"></p><p><strong>结果并非一定按照设置的优先级执行</strong></p><p>原因：<strong>线程的优先级设置可以理解为线程抢占CPU时间片的概率，虽然概率比较大，但是它不一定就是按照优先级的顺序去抢占CPU时间片的，具体的执行顺序还是要根据谁先抢到了CPU的时间片，谁就先来执行。</strong></p><h2 id="线程中的常用方法">0.5线程中的常用方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>###yield（）方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> thread_<span class="token punctuation">.</span>threadmethod_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**线程的常见方法演示 * sleep，start，join，yield，wait， * @author DevilStory * @version 0.0.1 * @Date 2021/8/12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>          NormalMethod<span class="token punctuation">.</span><span class="token function">yield_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * yield()，a线程调用，则a礼让其他线程，a进入Ready状态，不释放锁，和其他线程等待CPU调度     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">yield_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//礼让main线程</span>                Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yield"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812160338483-1628755420794.png" alt="image-20210812160338483"></p><p>###sleep（）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        NormalMethod<span class="token punctuation">.</span><span class="token function">sleep_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * sleep(sleeptime),线程a调用此方法，a进入TIMED WAITING，不释放锁，当其他线程需要a线程的锁，需等待sleeptime结束。     * 此后a进入RUNABLE的就绪状态     * @throws InterruptedException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span> Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812161114838-1628755878310.png" alt="image-20210812161114838"></p><p>###join（）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>       NormalMethod<span class="token punctuation">.</span><span class="token function">join_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * join(timeout)，join()，分别进入Timed Waiting，Waiting，a线程中调用b线程的join方法，     * 则a需等待b执行结束才会执行，b会让出锁，     *join_(),在父线程中插队子线程，等待子线程执行完毕，父线程才会执行     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">join_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">par</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"父线程"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 父线程 */</span><span class="token keyword">class</span> <span class="token class-name">par</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建字线程</span>        Thread chiTh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">chi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"子线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动子线程</span>        chiTh<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        在父线程中创建子线程，并让子线程插队</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            chiTh<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        父线程任务</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t执行"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 子线程 */</span><span class="token keyword">class</span> <span class="token class-name">chi</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//子线程任务</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//子线程加入延时</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t执行"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   <img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210812161407319-1628756049479.png" alt="image-20210812161407319"></p><h2 id="参考文档">0.6参考文档</h2><p><a href="https://www.pdai.tech/md/java/thread/java-thread-x-theorty.html#%e5%b8%a6%e7%9d%80bat%e5%a4%a7%e5%8e%82%e7%9a%84%e9%9d%a2%e8%af%95%e9%97%ae%e9%a2%98%e5%8e%bb%e7%90%86%e8%a7%a3" rel="external nofollow noreferrer">点击跳转线程</a></p><p><a href="https://www.pdai.tech/md/java/thread/java-thread-x-theorty.html#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95" rel="external nofollow noreferrer">点击跳转多线程并发安全控制方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发问题 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> 线程建立 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
