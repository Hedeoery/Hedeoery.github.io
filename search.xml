<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaTest2.md</title>
      <link href="/posts/776d.html"/>
      <url>/posts/776d.html</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="单列集合"><a href="#单列集合" class="headerlink" title="单列集合"></a>单列集合</h1><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><ol><li><p>单列集合</p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Collection-1626424718772.png" alt="Collection"></p></li><li><p>双列集合</p></li></ol><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Map-1626424735580.png" alt="Map"></p><h2 id="单列集合-1"><a href="#单列集合-1" class="headerlink" title="单列集合"></a>单列集合</h2><p>###<strong>由ArrayList类讲解add()方法</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/ArrayList-1626513696006.png" alt="ArrayList"></p><ol><li><p>常见方法和属性</p><pre class=" language-java"><code class="language-java"><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//ArrayList大小</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//截取[ )的元素</span> \\\\\\属性：<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关键字transient意为瞬间，表示elementData数组不会被序列化</span></code></pre><blockquote><p>Constructs an empty list with an initial capacity of ten.</p><p>构建一个初始容量为10的空列表。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Constructs an empty list with the specified initial capacity.<br>Params:<br>initialCapacity – the initial capacity of the list<br>Throws:<br>IllegalArgumentException – if the specified initial capacity is negative</p><p>构建一个具有指定初始容量的空列表。<br>参数。<br>initialCapacity - 列表的初始容量<br>抛出。<br>IllegalArgumentException - 如果指定的初始容量是负的</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>属性：</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * Default initial capacity.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Shared empty array instance used for empty instances.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Shared empty array instance used for default sized empty instances. We     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when     * first element is added.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The array buffer into which the elements of the ArrayList are stored.     * The capacity of the ArrayList is the length of this array buffer. Any     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA     * will be expanded to DEFAULT_CAPACITY when the first element is added.     */</span>    <span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// non-private to simplify nested class access</span>    <span class="token comment" spellcheck="true">/**     * The size of the ArrayList (the number of elements it contains).     *     * @serial     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span></code></pre></li><li><p>ArrayList特点</p><ul><li>集合中的元素是不唯一的，（可加入多个null）有序的对象</li><li>访问和修改元素效率高，但线程不安全</li></ul></li><li><p>遍历方法</p><ul><li><p>普通的下标访问</p><pre class=" language-java"><code class="language-java"> ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre></li><li><p>迭代器对象访问</p><pre class=" language-java"><code class="language-java">        Iterator obj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li><li><p>增强for循环</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>普通打印</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>ArrayList添加元素源码探究</p><ul><li><p>规律：其中元素存在于elementData数组中，类型为Object， 添加的元素为基本数据类型，添加前将“包装”</p></li><li><p>创建ArrayList对象</p><ul><li>若使用无参构造，则数组的初始长度为0，第一次添加元素是时，数组的容量增加为10，后续再次添加，则数组长度增加至目前长度的1.5倍</li><li>若使用有参构造，初始完后，存放的数组长度为指定大小，当添加元素至指定数组长度时，再次添加元素，将扩容目前的1.5倍。</li></ul></li><li><p>使用Arrays.copyOf()方法进行元素的添加</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>                                      <span class="token function">newCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>源码</p><ol><li><p>无参构造方法</p><blockquote><p>Constructs an empty list with an initial capacity of ten</p><p>构建一个初始容量为10的空列表</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>添加实现</p><blockquote><p>This helper method split out from add(E) to keep method bytecode size under 35 (the -XX:MaxInlineSize default value), which helps when add(E) is called in a C1-compiled loop.</p><p>这个辅助方法从add(E)中分离出来，使方法的字节码大小保持在35以下（-XX:MaxInlineSize默认值），这有助于add(E)在C1编译的循环中被调用。</p></blockquote><p>进入到该方法后，elementData长度至少为10</p><ul><li><p>当初次添加元素，即if为true，<strong>进行扩容</strong>，进入<code>private Object[] grow(int minCapacity)</code><br>—&gt; <code>private int newCapacity(int minCapacity)</code></p><pre class=" language-java"><code class="language-java">        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span>                <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10</span>与<span class="token number">0</span>取最大债</code></pre><p>保证初次添加元素，elementData增加到10</p></li><li><p>第二次添加元素，if为false，直接将元素加至数组，当元素出现10个，<strong>进入扩容</strong></p></li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            elementData <span class="token operator">=</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        size <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210717174101459-1626514863267.png"></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210717174256002-1626514978606.png" alt="image-20210717174256002"></p><blockquote><p>Increases the capacity to ensure that it can hold at least the number of elements specified by the minimum capacity argument.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>增加容量，以确保它至少可以容纳最小容量参数所指定的元素数量。<br>Params:<br>minCapacity - 所需的最小容量<br>抛出。<br>OutOfMemoryError - 如果minCapacity小于0</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>                                           <span class="token function">newCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Returns a capacity at least as large as the given minimum capacity. Returns the current capacity increased by 50% if that suffices. Will not return a capacity greater than MAX_ARRAY_SIZE unless the given minimum capacity is greater than MAX_ARRAY_SIZE.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>返回一个至少与给定最小容量一样大的容量。如果足够的话，返回当前容量增加的50%。不会返回一个大于MAX_ARRAY_SIZE的容量，除非给定的最小容量大于MAX_ARRAY_SIZE。<br>Params:<br>minCapacity - 所需的最小容量<br>抛出。<br>OutOfMemoryError - 如果minCapacity小于零。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">newCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code        int oldCapacity = elementData.length;                //除初次扩容外，满10个元素后，每次添加元素，扩容1.5倍        int newCapacity = oldCapacity + (oldCapacity >> 1);                if (newCapacity - minCapacity &lt;= 0) {            if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA)                return Math.max(DEFAULT_CAPACITY, minCapacity);//初始长度为10            if (minCapacity &lt; 0) // overflow                throw new OutOfMemoryError();            return minCapacity;        }        return (newCapacity - MAX_ARRAY_SIZE &lt;= 0)//有无超过允许最大容量            ? newCapacity            : hugeCapacity(minCapacity);//超过MAX_ARRAY_SIZE，仍然取MAX_ARRAY_SIZE    }</span></code></pre><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210717174511049.png" alt="image-20210717174511049"></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210717174726436-1626515259510.png" alt="image-20210717174726436"></p></li></ol></li></ol><p>6.总结</p><ul><li>初次添加，elementData为10</li><li>当元素添至10 个，以后每次添加，扩容1.5倍  ，当扩至MAX_ARRAY_SIZE，将保持MAX_ARRAY_SIZE大小。          </li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><h4 id="特点：实现了双向链表和双向队列"><a href="#特点：实现了双向链表和双向队列" class="headerlink" title="特点：实现了双向链表和双向队列"></a>特点：实现了双向链表和双向队列</h4><ul><li><p>依赖关系<br><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/LinkedList-1626501451296-1626501488898.png" alt="LinkedList"></p></li><li><p>可添加任意的元素，元素可重复</p></li><li><p>线程不安全，没有同步 </p></li><li><p>实现List接口，可对List操作</p></li><li><p>实现Queue，可对队列操作</p></li><li><p>实现Cloneable，可对LinkedList对象拷贝</p></li><li><p>实现Serializable接口，可进行数据流传输</p></li><li><p>添加和删除元素高效，因为不涉及数组的扩容</p></li><li><p>属性</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Pointer to first node.     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Pointer to last node.     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span></code></pre></li><li><p>常见的构造方法</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//无参 public LinkedList() {    }//有参public LinkedList(Collection&lt;? extends E> c) {        this();        addAll(c);    }</span></code></pre></li><li><p>内部类</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        E item<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>常用方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将指定的元素添加到这个列表的末尾。//这个方法等同于addLast。public void addFirst(E e) {        linkFirst(e);    }//移除这个列表中第一次出现的指定元素（当从头到尾遍历列表时）。如果列表中不包含该元素，它就不会被改变。//Params://要从这个列表中移除的元素，如果存在的话返回。    public boolean removeFirstOccurrence(Object o) {        return remove(o);    }//用指定的元素替换这个列表中指定位置的元素。//Params://index - 要替换的元素的索引//element - 要存储在指定位置的元素//返回。//之前在指定位置的元素//抛出。//IndexOutOfBoundsException//    public E set(int index, E element) {        checkElementIndex(index);        Node&lt;E> x = node(index);        E oldVal = x.item;        x.item = element;        return oldVal;    }//返回这个列表中指定位置的元素。//Params://index - 要返回的元素的索引//返回。//在这个列表中指定位置的元素//抛出。//IndexOutOfBoundsException    public E get(int index) {        checkElementIndex(index);        return node(index).item;    }</span></code></pre></li></ul><h4 id="双向链表和双向队列"><a href="#双向链表和双向队列" class="headerlink" title="双向链表和双向队列"></a>双向链表和双向队列</h4><ol><li>双向链表结构<br><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210717142748254-1626503272103.png" alt="image-20210717142748254"></li></ol><h4 id="以add（）方法和remove（）讲解LindedList添加和删除元素机制"><a href="#以add（）方法和remove（）讲解LindedList添加和删除元素机制" class="headerlink" title="以add（）方法和remove（）讲解LindedList添加和删除元素机制"></a>以add（）方法和remove（）讲解LindedList添加和删除元素机制</h4><ol><li><strong>add（）</strong></li></ol><p>演示源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList_Eg</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>LinkedList link = new LinkedList()**;</code>调用无参构造**</p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210717155513225-1626508516961.png" alt="image-20210717155513225"></p><hr><p><strong>添加函数</strong></p><blockquote><p>Appends the specified element to the end of this list.<br>This method is equivalent to addLast.<br>Params:<br>e – element to be appended to this list<br>Returns:<br>true (as specified by Collection.add)</p><p>将指定的元素添加到这个列表的末尾。<br>这个方法等同于addLast。<br>Params:<br>e - 要追加到这个列表的元素<br>返回。<br>true (由Collection.add指定)</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Links e as last element</p><p>链接e作为最后一个元素</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><p><strong>添加2个元素后的LinkedList</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210717161444263.png" alt="image-20210717161444263"></p><hr><p><strong>Linkedlist的add（）总结：</strong></p><ul><li>添加与List的last结点后</li></ul><p><strong>2.remove（）</strong></p><p><strong>演示源码</strong></p><pre class=" language-java"><code class="language-java">link<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除链表首个结点</span></code></pre><p><strong>调佣该方法删除首个结点</strong></p><p>Retrieves and removes the head (</p><blockquote><p>first element) of this list.<br>Returns:<br>the head of this list<br>Throws:<br>NoSuchElementException – if this list is empty<br>Since:</p><p>1.5</p><p>检索并删除该列表的头部（第一个元素）。<br>返回。<br>这个列表的头部<br>抛出。<br>NoSuchElementException - 如果这个列表是空的<br>自从<br>1.5</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Removes and returns the first element from this list.<br>Returns:<br>the first element from this list<br>Throws:<br>NoSuchElementException – if this list is empty</p><p><strong>移除并返回此列表中的第一个元素。</strong><br>返回。<br>这个列表中的第一个元素<br>抛出。<br>NoSuchElementException - 如果这个列表是空的</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Unlinks non-null first node f</p><p>解除非空的第一个节点f的链接</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> E <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// assert f == first &amp;&amp; f != null;    final E element = f.item;    final Node&lt;E> next = f.next;    f.item = null;    f.next = null; // help GC    first = next;    if (next == null)        last = null;    else        next.prev = null;    size--;    modCount++;    return element;}</span></code></pre><p><strong>删除首个结点后的LinkedList</strong></p><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210717163539915-1626510942358.png" alt="image-20210717163539915"></p><p>总结：</p><ul><li>删除List的首个结点</li></ul><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><p>线程安全的，Vector中的所有Public方法均有synchronized修饰，保证线程安全</p></li><li><p>依赖关系</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</code></pre></li></ul><p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/Vector-1626485881012.png" alt="Vector"></p><h4 id="以add（）讲解Vector源码"><a href="#以add（）讲解Vector源码" class="headerlink" title="以add（）讲解Vector源码"></a>以add（）讲解Vector源码</h4><ol><li><p>实现代码（采用无参构造）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"all"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector_Eg</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Vector vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无参构造                for (int i = 0; i &lt; 10; i++) {            vector.add(i);        }        vector.add(10);        for (Object o : vector) {            System.out.println(o);        }    }}</span></code></pre></li><li><p>源码实现逻辑</p><ol><li><p><strong>类加载</strong></p><blockquote><p>Loads the class with the specified binary name. This method searches for classes in the same manner as the loadClass(String, boolean) method. It is invoked by the Java virtual machine to resolve class references. Invoking this method is equivalent to invoking loadClass(name, false).<br>Params:<br>name – The binary name of the class<br>Returns:<br>The resulting Class object<br>Throws:<br>ClassNotFoundException – If the class was not found</p><p>以指定的二进制名称加载类。这个方法以与loadClass(String, boolean)方法相同的方式搜索类。它被Java虚拟机调用以解析类的引用。调用此方法等同于调用loadClass(name, false)。<br>参数。<br>name - 类的二进制名称<br>返回。<br>得到的类对象<br>抛出。<br>ClassNotFoundException - 如果没有找到该类。</p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Invoked by the VM after loading class with this loader</p><p>在用这个加载器加载类之后，由虚拟机调用</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPackageAccess</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token punctuation">,</span> ProtectionDomain pd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> SecurityManager sm <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ReflectUtil<span class="token punctuation">.</span><span class="token function">isNonPublicProxyClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> intf<span class="token operator">:</span> cls<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">checkPackageAccess</span><span class="token punctuation">(</span>intf<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> String packageName <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>packageName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">public</span> Void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        sm<span class="token punctuation">.</span><span class="token function">checkPackageAccess</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AccessControlContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProtectionDomain</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>pd<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><p>2.<strong>调用无参构造，创建初始容量为10的数组elementData，<code>protected Object[] elementData;</code></strong><br><strong>（为Vector类中的储存向量成分的数组缓冲区。矢量的容量是这个数组缓冲区的长度，至少要大到足以容纳该矢量的所有元素。<em>矢量中最后一个元素之后的任何数组元素都是null</em>）、</strong></p><blockquote><p>Constructs an empty vector so that its internal data array has size 10 and its standard capacity increment is zero.</p><p>构建一个空向量，使其内部数据阵列的大小为10，其标准容量增量为0。</p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Constructs an empty vector with the specified initial capacity and capacity increment.<br>Params:<br>initialCapacity – the initial capacity of the vector<br>capacityIncrement – the amount by which the capacity is increased when the vector overflows<br>Throws:<br>IllegalArgumentException – if the specified initial capacity is negative</p><p>用指定的初始容量和容量增量构造一个空向量。<br>参数。<br>initialCapacity - 向量的初始容量<br>capacityIncrement - 当向量溢出时，容量增加的数量。<br>抛出。<br>IllegalArgumentException - 如果指定的初始容量是负的</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">int</span> capacityIncrement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacityIncrement <span class="token operator">=</span> capacityIncrement<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="D:\JavaProjects\AoYiXiong_Java\Java_Basics\src\In_Collections\image-20210717105743261.png" alt="image-20210717105743261"></p></li></ol></li></ol><hr><p>3.<strong>由于加入的数据对象为基本数据类型，将要“包装”</strong></p><blockquote><p>Returns an Integer instance representing the specified int value. If a new Integer instance is not required, this method should generally be used in preference to the constructor Integer(int), as this method is likely to yield significantly better space and time performance by caching frequently requested values. This method will always cache values in the range -128 to 127, inclusive, and may cache other values outside of this range.<br>Params:<br>i – an int value.<br>Returns:<br>an Integer instance representing i.<br>Since:<br>1.5</p><p>返回一个代表指定int值的Integer实例。如果不需要一个新的Integer实例，通常应该优先使用这个方法，而不是构造函数Integer(int)，因为这个方法通过缓存频繁请求的值，可能会产生明显更好的空间和时间性能。这个方法将始终缓存-128到127（包括）范围内的值，并可能缓存这个范围之外的其他值。<br>Params:<br>i - 一个int值。<br>返回。<br>一个Integer实例，代表i。<br>自从。<br>1.5</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@HotSpotIntrinsicCandidate</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>            <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.<strong>正式进入添加方法</strong></p><blockquote><p>Appends the specified element to the end of this Vector.<br>Params:<br>e – element to be appended to this Vector<br>Returns:<br>true (as specified by Collection.add)<br>Since:<br>1.2</p><p>将指定的元素追加到这个Vector的末尾。<br>Params:<br>e - 要追加到这个Vector的元素<br>返回。<br>true (由Collection.add指定)<br>自从。<br>1.2</p></blockquote><pre class=" language-jav"><code class="language-jav">    public synchronized boolean add(E e) {        modCount++;        add(e, elementData, elementCount);        return true;    </code></pre><blockquote><p>This helper method split out from add(E) to keep method bytecode size under 35 (the -XX:MaxInlineSize default value), which helps when add(E) is called in a C1-compiled loop.</p><p>这个辅助方法从add(E)中分离出来，使方法的字节码大小保持在35以下（-XX:MaxInlineSize默认值），这有助于add(E)在C1编译的循环中被调用。</p></blockquote><ul><li><strong>统计当前elementData数组的长度，记为elementCount（形参s），与此时的elementData长度比较，若不等，则添加新元素至elementData中；若此时长度已至10，需扩容</strong></li></ul><pre class=" language-java"><code class="language-java">将elemenData数组的长度与所需的长度比较，    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true,则扩容</span>            elementData <span class="token operator">=</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        elementCount <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><pre class=" language-java"><code class="language-java">实现代码部分：<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>循环执行<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span>方法，当所需数组长度<span class="token operator">></span><span class="token number">10</span>时，扩容。。。</code></pre></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">grow</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Increases the capacity to ensure that it can hold at least the number of elements specified by the minimum capacity argument.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>增加容量，以确保它至少可以容纳最小容量参数所指定的元素数量。<br>Params:<br><strong>minCapacity - 所需的最小容量</strong><br>抛出。<br>OutOfMemoryError - 如果minCapacity小于0</p></blockquote><ul><li><strong>以当前所需的最小长度为参，构建一个扩容后的elementData数组</strong></li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>                                           <span class="token function">newCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Returns a capacity at least as large as the given minimum capacity. Will not return a capacity greater than MAX_ARRAY_SIZE unless the given minimum capacity is greater than MAX_ARRAY_SIZE.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>返回一个至少与给定最小容量一样大的容量。不会返回大于MAX_ARRAY_SIZE的容量，除非给定的最小容量大于MAX_ARRAY_SIZE。<br>Params:<br>minCapacity - 所需的最小容量<br>抛出。<br>OutOfMemoryError - 如果minCapacity小于零。</p></blockquote><ul><li><strong>当elementData长度未达到10，不会进入到该方法，即不需扩容</strong></li><li><strong>当容量增量（capacityIncrement）小于或等于零，每次需要增长时，数组（elementData）的容量就会增加一倍。</strong></li><li><strong>判断newCapacity与minCapacity，若扩容后任然小于所需的最小长度，在判断是否是计算出错，出错则抛出OutOfMemoryError，并返回minCapacity</strong></li><li><strong>若无上述错误，判断扩容2倍后的newCapacity是否大于MAX_ARRAY_SIZE，</strong></li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">newCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>capacityIncrement <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                         capacityIncrement <span class="token operator">:</span> oldCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token operator">?</span> newCapacity<span class="token comment" spellcheck="true">// return minest capacity</span>            <span class="token operator">:</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 后续处理,其实都返回2147183639</span>    <span class="token punctuation">}</span></code></pre><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token comment" spellcheck="true">//MAX_ARRAY_SIZE=2147483639</span>      Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>      MAX_ARRAY_SIZE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2147483639</span><span class="token punctuation">}</span></code></pre></blockquote><ul><li><strong>Arrays类的copyOf（）实现</strong></li></ul><blockquote><p>Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain null. Such indices will exist if and only if the specified length is greater than that of the original array. The resulting array is of the class newType.<br>Params:<br>original – the array to be copied<br>newLength – the length of the copy to be returned<br>newType – the class of the copy to be returned<br>Type parameters:<br><t> – the class of the objects in the returned array<br><u> – the class of the objects in the original array<br>Returns:<br>a copy of the original array, truncated or padded with nulls to obtain the specified length<br>Throws:<br>NegativeArraySizeException – if newLength is negative<br>NullPointerException – if original is null<br>ArrayStoreException – if an element copied from original is not of a runtime type that can be stored in an array of class newType<br>Since:<br>1.6</u></t></p><u><p>复制指定的数组，截断或用空值填充（如果需要），使副本具有指定的长度。对于所有在原始数组和副本中都有效的索引，这两个数组将包含相同的值。对于任何在副本中有效但在原始数组中无效的指数，副本将包含空值。当且仅当指定的长度大于原始数组的长度时，这些索引才会存在。产生的数组是newType类型的。<br>Params:<br>original - 要复制的数组<br>newLength - 要返回的拷贝的长度<br>newType - 要返回的副本的类型<br>类型参数。<br><t> - 返回数组中的对象的类别<br><u> - 原始数组中的对象的类型<br>返回。<br>原始数组的副本，被截断或用空值填充以获得指定的长度<br>抛出。<br>NegativeArraySizeException - 如果newLength是负数的话<br>NullPointerException - 如果原数组是空的<br>ArrayStoreException - 如果从原数组复制的元素不属于可以存储在newType类数组中的运行时类型。<br>自从。<br>1.6</u></t></p><u></u></u></blockquote><u><u><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@HotSpotIntrinsicCandidate</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span>U<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span>U<span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> newType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        T<span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span>newType <span class="token operator">==</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token operator">?</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>newType<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                         Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> copy<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>扩容返回的<code>copy</code>数组</strong></p><img src="D:\JavaProjects\AoYiXiong_Java\Java_Basics\src\In_Collections\image-20210717113734573.png" alt="image-20210717113734573" style="zoom: 67%;"><p><strong>扩容后的elementData数组</strong></p><img src="http://cdn.jsdelivr.net/gh/Hedeoery/PictureStore/img/image-20210717113851343.png" alt="image-20210717113851343" style="zoom:80%;"><p><strong>添加了11个元素</strong></p><img src="D:\JavaProjects\AoYiXiong_Java\Java_Basics\src\In_Collections\image-20210717114127924.png" alt="image-20210717114127924" style="zoom: 80%;"><p><strong>3.Vector add方法总结</strong></p><p>无参构造</p><ul><li>初始为10</li><li>大于10后，扩容，每次添加元素，element数组扩容2倍</li></ul><p>有参构造</p><ul><li>初始为指定长度,到达指定长度后，扩为10个，</li><li>大于10后，每次扩容，element数组扩容2倍</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">int</span> capacityIncrement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacityIncrement <span class="token operator">=</span> capacityIncrement<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></u></u>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Firstmd</title>
      <link href="/posts/1361.html"/>
      <url>/posts/1361.html</url>
      
        <content type="html"><![CDATA[<h1 id="单列集合"><a href="#单列集合" class="headerlink" title="单列集合"></a>单列集合</h1><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><ol><li><p>单列集合</p><p><img src="Collection-1626424718772.png" alt="Collection"></p></li><li><p>双列集合</p></li></ol><p><img src="Map-1626424735580.png" alt="Map"></p><h2 id="单列集合-1"><a href="#单列集合-1" class="headerlink" title="单列集合"></a>单列集合</h2><p>###<strong>由ArrayList类讲解add()方法</strong></p><p><img src="ArrayList-1626513696006.png" alt="ArrayList"></p><ol><li><p>常见方法和属性</p><pre class=" language-java"><code class="language-java"><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//ArrayList大小</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//截取[ )的元素</span> \\\\\\属性：<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关键字transient意为瞬间，表示elementData数组不会被序列化</span></code></pre><blockquote><p>Constructs an empty list with an initial capacity of ten.</p><p>构建一个初始容量为10的空列表。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Constructs an empty list with the specified initial capacity.<br>Params:<br>initialCapacity – the initial capacity of the list<br>Throws:<br>IllegalArgumentException – if the specified initial capacity is negative</p><p>构建一个具有指定初始容量的空列表。<br>参数。<br>initialCapacity - 列表的初始容量<br>抛出。<br>IllegalArgumentException - 如果指定的初始容量是负的</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>属性：</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * Default initial capacity.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Shared empty array instance used for empty instances.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Shared empty array instance used for default sized empty instances. We     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when     * first element is added.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The array buffer into which the elements of the ArrayList are stored.     * The capacity of the ArrayList is the length of this array buffer. Any     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA     * will be expanded to DEFAULT_CAPACITY when the first element is added.     */</span>    <span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// non-private to simplify nested class access</span>    <span class="token comment" spellcheck="true">/**     * The size of the ArrayList (the number of elements it contains).     *     * @serial     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span></code></pre></li><li><p>ArrayList特点</p><ul><li>集合中的元素是不唯一的，（可加入多个null）有序的对象</li><li>访问和修改元素效率高，但线程不安全</li></ul></li><li><p>遍历方法</p><ul><li><p>普通的下标访问</p><pre class=" language-java"><code class="language-java"> ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre></li><li><p>迭代器对象访问</p><pre class=" language-java"><code class="language-java">        Iterator obj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li><li><p>增强for循环</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>普通打印</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>ArrayList添加元素源码探究</p><ul><li><p>规律：其中元素存在于elementData数组中，类型为Object， 添加的元素为基本数据类型，添加前将“包装”</p></li><li><p>创建ArrayList对象</p><ul><li>若使用无参构造，则数组的初始长度为0，第一次添加元素是时，数组的容量增加为10，后续再次添加，则数组长度增加至目前长度的1.5倍</li><li>若使用有参构造，初始完后，存放的数组长度为指定大小，当添加元素至指定数组长度时，再次添加元素，将扩容目前的1.5倍。</li></ul></li><li><p>使用Arrays.copyOf()方法进行元素的添加</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>                                      <span class="token function">newCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>源码</p><ol><li><p>无参构造方法</p><blockquote><p>Constructs an empty list with an initial capacity of ten</p><p>构建一个初始容量为10的空列表</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>添加实现</p><blockquote><p>This helper method split out from add(E) to keep method bytecode size under 35 (the -XX:MaxInlineSize default value), which helps when add(E) is called in a C1-compiled loop.</p><p>这个辅助方法从add(E)中分离出来，使方法的字节码大小保持在35以下（-XX:MaxInlineSize默认值），这有助于add(E)在C1编译的循环中被调用。</p></blockquote><p>进入到该方法后，elementData长度至少为10</p><ul><li><p>当初次添加元素，即if为true，<strong>进行扩容</strong>，进入<code>private Object[] grow(int minCapacity)</code><br>—&gt; <code>private int newCapacity(int minCapacity)</code></p><pre class=" language-java"><code class="language-java">        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span>                <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10</span>与<span class="token number">0</span>取最大债</code></pre><p>保证初次添加元素，elementData增加到10</p></li><li><p>第二次添加元素，if为false，直接将元素加至数组，当元素出现10个，<strong>进入扩容</strong></p></li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            elementData <span class="token operator">=</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        size <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="image-20210717174101459-1626514863267.png"></p><p><img src="image-20210717174256002-1626514978606.png" alt="image-20210717174256002"></p><blockquote><p>Increases the capacity to ensure that it can hold at least the number of elements specified by the minimum capacity argument.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>增加容量，以确保它至少可以容纳最小容量参数所指定的元素数量。<br>Params:<br>minCapacity - 所需的最小容量<br>抛出。<br>OutOfMemoryError - 如果minCapacity小于0</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>                                           <span class="token function">newCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Returns a capacity at least as large as the given minimum capacity. Returns the current capacity increased by 50% if that suffices. Will not return a capacity greater than MAX_ARRAY_SIZE unless the given minimum capacity is greater than MAX_ARRAY_SIZE.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>返回一个至少与给定最小容量一样大的容量。如果足够的话，返回当前容量增加的50%。不会返回一个大于MAX_ARRAY_SIZE的容量，除非给定的最小容量大于MAX_ARRAY_SIZE。<br>Params:<br>minCapacity - 所需的最小容量<br>抛出。<br>OutOfMemoryError - 如果minCapacity小于零。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">newCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code        int oldCapacity = elementData.length;                //除初次扩容外，满10个元素后，每次添加元素，扩容1.5倍        int newCapacity = oldCapacity + (oldCapacity >> 1);                if (newCapacity - minCapacity &lt;= 0) {            if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA)                return Math.max(DEFAULT_CAPACITY, minCapacity);//初始长度为10            if (minCapacity &lt; 0) // overflow                throw new OutOfMemoryError();            return minCapacity;        }        return (newCapacity - MAX_ARRAY_SIZE &lt;= 0)//有无超过允许最大容量            ? newCapacity            : hugeCapacity(minCapacity);//超过MAX_ARRAY_SIZE，仍然取MAX_ARRAY_SIZE    }</span></code></pre><p><img src="image-20210717174511049.png" alt="image-20210717174511049"></p><p><img src="image-20210717174726436-1626515259510.png" alt="image-20210717174726436"></p></li></ol></li></ol><p>6.总结</p><ul><li>初次添加，elementData为10</li><li>当元素添至10 个，以后每次添加，扩容1.5倍  ，当扩至MAX_ARRAY_SIZE，将保持MAX_ARRAY_SIZE大小。          </li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><h4 id="特点：实现了双向链表和双向队列"><a href="#特点：实现了双向链表和双向队列" class="headerlink" title="特点：实现了双向链表和双向队列"></a>特点：实现了双向链表和双向队列</h4><ul><li><p>依赖关系<br><img src="LinkedList-1626501451296-1626501488898.png" alt="LinkedList"></p></li><li><p>可添加任意的元素，元素可重复</p></li><li><p>线程不安全，没有同步 </p></li><li><p>实现List接口，可对List操作</p></li><li><p>实现Queue，可对队列操作</p></li><li><p>实现Cloneable，可对LinkedList对象拷贝</p></li><li><p>实现Serializable接口，可进行数据流传输</p></li><li><p>添加和删除元素高效，因为不涉及数组的扩容</p></li><li><p>属性</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Pointer to first node.     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Pointer to last node.     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span></code></pre></li><li><p>常见的构造方法</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//无参 public LinkedList() {    }//有参public LinkedList(Collection&lt;? extends E> c) {        this();        addAll(c);    }</span></code></pre></li><li><p>内部类</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        E item<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>常用方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将指定的元素添加到这个列表的末尾。//这个方法等同于addLast。public void addFirst(E e) {        linkFirst(e);    }//移除这个列表中第一次出现的指定元素（当从头到尾遍历列表时）。如果列表中不包含该元素，它就不会被改变。//Params://要从这个列表中移除的元素，如果存在的话返回。    public boolean removeFirstOccurrence(Object o) {        return remove(o);    }//用指定的元素替换这个列表中指定位置的元素。//Params://index - 要替换的元素的索引//element - 要存储在指定位置的元素//返回。//之前在指定位置的元素//抛出。//IndexOutOfBoundsException//    public E set(int index, E element) {        checkElementIndex(index);        Node&lt;E> x = node(index);        E oldVal = x.item;        x.item = element;        return oldVal;    }//返回这个列表中指定位置的元素。//Params://index - 要返回的元素的索引//返回。//在这个列表中指定位置的元素//抛出。//IndexOutOfBoundsException    public E get(int index) {        checkElementIndex(index);        return node(index).item;    }</span></code></pre></li></ul><h4 id="双向链表和双向队列"><a href="#双向链表和双向队列" class="headerlink" title="双向链表和双向队列"></a>双向链表和双向队列</h4><ol><li>双向链表结构<br><img src="image-20210717142748254-1626503272103.png" alt="image-20210717142748254"></li></ol><h4 id="以add（）方法和remove（）讲解LindedList添加和删除元素机制"><a href="#以add（）方法和remove（）讲解LindedList添加和删除元素机制" class="headerlink" title="以add（）方法和remove（）讲解LindedList添加和删除元素机制"></a>以add（）方法和remove（）讲解LindedList添加和删除元素机制</h4><ol><li><strong>add（）</strong></li></ol><p>演示源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList_Eg</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>LinkedList link = new LinkedList()**;</code>调用无参构造**</p><p><img src="image-20210717155513225-1626508516961.png" alt="image-20210717155513225"></p><hr><p><strong>添加函数</strong></p><blockquote><p>Appends the specified element to the end of this list.<br>This method is equivalent to addLast.<br>Params:<br>e – element to be appended to this list<br>Returns:<br>true (as specified by Collection.add)</p><p>将指定的元素添加到这个列表的末尾。<br>这个方法等同于addLast。<br>Params:<br>e - 要追加到这个列表的元素<br>返回。<br>true (由Collection.add指定)</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Links e as last element</p><p>链接e作为最后一个元素</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><p><strong>添加2个元素后的LinkedList</strong></p><p><img src="image-20210717161444263.png" alt="image-20210717161444263"></p><hr><p><strong>Linkedlist的add（）总结：</strong></p><ul><li>添加与List的last结点后</li></ul><p><strong>2.remove（）</strong></p><p><strong>演示源码</strong></p><pre class=" language-java"><code class="language-java">link<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除链表首个结点</span></code></pre><p><strong>调佣该方法删除首个结点</strong></p><p>Retrieves and removes the head (</p><blockquote><p>first element) of this list.<br>Returns:<br>the head of this list<br>Throws:<br>NoSuchElementException – if this list is empty<br>Since:</p><p>1.5</p><p>检索并删除该列表的头部（第一个元素）。<br>返回。<br>这个列表的头部<br>抛出。<br>NoSuchElementException - 如果这个列表是空的<br>自从<br>1.5</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Removes and returns the first element from this list.<br>Returns:<br>the first element from this list<br>Throws:<br>NoSuchElementException – if this list is empty</p><p><strong>移除并返回此列表中的第一个元素。</strong><br>返回。<br>这个列表中的第一个元素<br>抛出。<br>NoSuchElementException - 如果这个列表是空的</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Unlinks non-null first node f</p><p>解除非空的第一个节点f的链接</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> E <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// assert f == first &amp;&amp; f != null;    final E element = f.item;    final Node&lt;E> next = f.next;    f.item = null;    f.next = null; // help GC    first = next;    if (next == null)        last = null;    else        next.prev = null;    size--;    modCount++;    return element;}</span></code></pre><p><strong>删除首个结点后的LinkedList</strong></p><p><img src="image-20210717163539915-1626510942358.png" alt="image-20210717163539915"></p><p>总结：</p><ul><li>删除List的首个结点</li></ul><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><p>线程安全的，Vector中的所有Public方法均有synchronized修饰，保证线程安全</p></li><li><p>依赖关系</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</code></pre></li></ul><p><img src="Vector-1626485881012.png" alt="Vector"></p><h4 id="以add（）讲解Vector源码"><a href="#以add（）讲解Vector源码" class="headerlink" title="以add（）讲解Vector源码"></a>以add（）讲解Vector源码</h4><ol><li><p>实现代码（采用无参构造）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"all"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector_Eg</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Vector vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无参构造</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>源码实现逻辑</p><ol><li><p><strong>类加载</strong></p><blockquote><p>Loads the class with the specified binary name. This method searches for classes in the same manner as the loadClass(String, boolean) method. It is invoked by the Java virtual machine to resolve class references. Invoking this method is equivalent to invoking loadClass(name, false).<br>Params:<br>name – The binary name of the class<br>Returns:<br>The resulting Class object<br>Throws:<br>ClassNotFoundException – If the class was not found</p><p>以指定的二进制名称加载类。这个方法以与loadClass(String, boolean)方法相同的方式搜索类。它被Java虚拟机调用以解析类的引用。调用此方法等同于调用loadClass(name, false)。<br>参数。<br>name - 类的二进制名称<br>返回。<br>得到的类对象<br>抛出。<br>ClassNotFoundException - 如果没有找到该类。</p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Invoked by the VM after loading class with this loader</p><p>在用这个加载器加载类之后，由虚拟机调用</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPackageAccess</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token punctuation">,</span> ProtectionDomain pd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> SecurityManager sm <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ReflectUtil<span class="token punctuation">.</span><span class="token function">isNonPublicProxyClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> intf<span class="token operator">:</span> cls<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">checkPackageAccess</span><span class="token punctuation">(</span>intf<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> String packageName <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>packageName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">public</span> Void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        sm<span class="token punctuation">.</span><span class="token function">checkPackageAccess</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AccessControlContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProtectionDomain</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>pd<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><p>2.<strong>调用无参构造，创建初始容量为10的数组elementData，<code>protected Object[] elementData;</code></strong><br><strong>（为Vector类中的储存向量成分的数组缓冲区。矢量的容量是这个数组缓冲区的长度，至少要大到足以容纳该矢量的所有元素。<em>矢量中最后一个元素之后的任何数组元素都是null</em>）、</strong></p><blockquote><p>Constructs an empty vector so that its internal data array has size 10 and its standard capacity increment is zero.</p><p>构建一个空向量，使其内部数据阵列的大小为10，其标准容量增量为0。</p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Constructs an empty vector with the specified initial capacity and capacity increment.<br>Params:<br>initialCapacity – the initial capacity of the vector<br>capacityIncrement – the amount by which the capacity is increased when the vector overflows<br>Throws:<br>IllegalArgumentException – if the specified initial capacity is negative</p><p>用指定的初始容量和容量增量构造一个空向量。<br>参数。<br>initialCapacity - 向量的初始容量<br>capacityIncrement - 当向量溢出时，容量增加的数量。<br>抛出。<br>IllegalArgumentException - 如果指定的初始容量是负的</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">int</span> capacityIncrement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacityIncrement <span class="token operator">=</span> capacityIncrement<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="D:/JavaProjects/AoYiXiong_Java/Java_Basics/src/In_Collections/image-20210717105743261.png" alt="image-20210717105743261"></p></li></ol></li></ol><hr><p>3.<strong>由于加入的数据对象为基本数据类型，将要“包装”</strong></p><blockquote><p>Returns an Integer instance representing the specified int value. If a new Integer instance is not required, this method should generally be used in preference to the constructor Integer(int), as this method is likely to yield significantly better space and time performance by caching frequently requested values. This method will always cache values in the range -128 to 127, inclusive, and may cache other values outside of this range.<br>Params:<br>i – an int value.<br>Returns:<br>an Integer instance representing i.<br>Since:<br>1.5</p><p>返回一个代表指定int值的Integer实例。如果不需要一个新的Integer实例，通常应该优先使用这个方法，而不是构造函数Integer(int)，因为这个方法通过缓存频繁请求的值，可能会产生明显更好的空间和时间性能。这个方法将始终缓存-128到127（包括）范围内的值，并可能缓存这个范围之外的其他值。<br>Params:<br>i - 一个int值。<br>返回。<br>一个Integer实例，代表i。<br>自从。<br>1.5</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@HotSpotIntrinsicCandidate</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>            <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.<strong>正式进入添加方法</strong></p><blockquote><p>Appends the specified element to the end of this Vector.<br>Params:<br>e – element to be appended to this Vector<br>Returns:<br>true (as specified by Collection.add)<br>Since:<br>1.2</p><p>将指定的元素追加到这个Vector的末尾。<br>Params:<br>e - 要追加到这个Vector的元素<br>返回。<br>true (由Collection.add指定)<br>自从。<br>1.2</p></blockquote><pre class=" language-jav"><code class="language-jav">    public synchronized boolean add(E e) {        modCount++;        add(e, elementData, elementCount);        return true;    </code></pre><blockquote><p>This helper method split out from add(E) to keep method bytecode size under 35 (the -XX:MaxInlineSize default value), which helps when add(E) is called in a C1-compiled loop.</p><p>这个辅助方法从add(E)中分离出来，使方法的字节码大小保持在35以下（-XX:MaxInlineSize默认值），这有助于add(E)在C1编译的循环中被调用。</p></blockquote><ul><li><strong>统计当前elementData数组的长度，记为elementCount（形参s），与此时的elementData长度比较，若不等，则添加新元素至elementData中；若此时长度已至10，需扩容</strong></li></ul><pre class=" language-java"><code class="language-java">将elemenData数组的长度与所需的长度比较，    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true,则扩容</span>            elementData <span class="token operator">=</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        elementCount <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><pre class=" language-java"><code class="language-java">实现代码部分：<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>循环执行<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span>方法，当所需数组长度<span class="token operator">></span><span class="token number">10</span>时，扩容。。。</code></pre></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">grow</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Increases the capacity to ensure that it can hold at least the number of elements specified by the minimum capacity argument.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>增加容量，以确保它至少可以容纳最小容量参数所指定的元素数量。<br>Params:<br><strong>minCapacity - 所需的最小容量</strong><br>抛出。<br>OutOfMemoryError - 如果minCapacity小于0</p></blockquote><ul><li><strong>以当前所需的最小长度为参，构建一个扩容后的elementData数组</strong></li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>                                           <span class="token function">newCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Returns a capacity at least as large as the given minimum capacity. Will not return a capacity greater than MAX_ARRAY_SIZE unless the given minimum capacity is greater than MAX_ARRAY_SIZE.<br>Params:<br>minCapacity – the desired minimum capacity<br>Throws:<br>OutOfMemoryError – if minCapacity is less than zero</p><p>返回一个至少与给定最小容量一样大的容量。不会返回大于MAX_ARRAY_SIZE的容量，除非给定的最小容量大于MAX_ARRAY_SIZE。<br>Params:<br>minCapacity - 所需的最小容量<br>抛出。<br>OutOfMemoryError - 如果minCapacity小于零。</p></blockquote><ul><li><strong>当elementData长度未达到10，不会进入到该方法，即不需扩容</strong></li><li><strong>当容量增量（capacityIncrement）小于或等于零，每次需要增长时，数组（elementData）的容量就会增加一倍。</strong></li><li><strong>判断newCapacity与minCapacity，若扩容后任然小于所需的最小长度，在判断是否是计算出错，出错则抛出OutOfMemoryError，并返回minCapacity</strong></li><li><strong>若无上述错误，判断扩容2倍后的newCapacity是否大于MAX_ARRAY_SIZE，</strong></li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">newCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>capacityIncrement <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                         capacityIncrement <span class="token operator">:</span> oldCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token operator">?</span> newCapacity<span class="token comment" spellcheck="true">// return minest capacity</span>            <span class="token operator">:</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 后续处理,其实都返回2147183639</span>    <span class="token punctuation">}</span></code></pre><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token comment" spellcheck="true">//MAX_ARRAY_SIZE=2147483639</span>      Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>      MAX_ARRAY_SIZE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2147483639</span><span class="token punctuation">}</span></code></pre></blockquote><ul><li><strong>Arrays类的copyOf（）实现</strong></li></ul><blockquote><p>Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the<br>specified length. For all indices that are valid in both the original array and the copy, the two<br>arrays will contain identical values. For any indices that are valid in the copy but not the<br>original, the copy will contain null. Such indices will exist if and only if the specified length is<br>greater than that of the original array. The resulting array is of the class newType.<br>Params:<br>original – the array to be copied<br>newLength – the length of the copy to be returned<br>newType – the class of the copy to be returned<br>Type parameters:<br>the class of the objects in the returned array<br>the class of the objects in the original array<br>Returns:</p></blockquote><blockquote><p>a copy of the original array, truncated or padded with nulls to obtain the specified length<br>Throws:<br>NegativeArraySizeException – if newLength is negative<br>NullPointerException – if original is null<br>ArrayStoreException – if an element copied from original is not of a runtime type that can be stored<br>in an array of class newType<br>Since:<br>1.6</p><p>复制指定的数组，截断或用空值填充（如果需要），使副本具有指定的长度。对于所有在原始数组和副本中都有效的索引，这两个数组将包含相同的值。对于任何在副本中有效但在原始数组中无效的指数，副本将包含空值。当且仅当指定的长度大于原始数组的长度时，这些索引才会存在。产生的数组是newType类型的。<br>Params:<br>original - 要复制的数组<br>newLength - 要返回的拷贝的长度<br>newType - 要返回的副本的类型<br>类型参数。<br><t> - 返回数组中的对象的类别<br><u> - 原始数组中的对象的类型<br>返回。<br>原始数组的副本，被截断或用空值填充以获得指定的长度<br>抛出。<br>NegativeArraySizeException - 如果newLength是负数的话<br>NullPointerException - 如果原数组是空的<br>ArrayStoreException - 如果从原数组复制的元素不属于可以存储在newType类数组中的运行时类型。<br>自从。<br>1.6</u></t></p><u></u></blockquote><u><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@HotSpotIntrinsicCandidate</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span>U<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span>U<span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> newType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        T<span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span>newType <span class="token operator">==</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token operator">?</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>newType<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                         Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> copy<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>扩容返回的<code>copy</code>数组</strong></p><img src="D:/JavaProjects/AoYiXiong_Java/Java_Basics/src/In_Collections/image-20210717113734573.png" alt="image-20210717113734573" style="zoom: 67%;"><p><strong>扩容后的elementData数组</strong></p><img src="http://hqd66.oss-cn-chengdu.aliyuncs.com/img/image-20210717113851343.png" alt="image-20210717113851343" style="zoom:80%;"><p><strong>添加了11个元素</strong></p><img src="D:/JavaProjects/AoYiXiong_Java/Java_Basics/src/In_Collections/image-20210717114127924.png" alt="image-20210717114127924" style="zoom: 80%;"><p><strong>3.Vector add方法总结</strong></p><p>无参构造</p><ul><li>初始为10</li><li>大于10后，扩容，每次添加元素，element数组扩容2倍</li></ul><p>有参构造</p><ul><li>初始为指定长度,到达指定长度后，扩为10个，</li><li>大于10后，每次扩容，element数组扩容2倍</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">int</span> capacityIncrement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacityIncrement <span class="token operator">=</span> capacityIncrement<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></u>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" rel="external nofollow noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noreferrer">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noreferrer">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noreferrer">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noreferrer">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" rel="external nofollow noreferrer">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
